[
  {
    "fileName": "GO502A37.md",
    "originalPath": "C:\\Users\\artu\\OneDrive - GFT Technologies SE\\Documents\\AI Impact\\codeDocumenterGQ\\generatedDocs\\LegacyTransformer__Business_Rules\\Programas_GO_Tratados\\GO502A37.md",
    "jobId": null,
    "error": null,
    "uri": null,
    "downloaded": true,
    "tokens": 7961,
    "jobIds": {
      "Overview": {
        "jobId": "2025-08-19__15-21-36.635__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__15-21-36.635__Agile/results/Overview",
        "processDefinition": [
          {
            "idProjects": "68a496ad936ae2dac1ee6a01",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Suspended Transaction Processing Engine",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a496ad936ae2dac1ee6a01",
            "idParent": null,
            "useCaseId": "68a496ad936ae2dac1ee6a00",
            "externalId": null
          },
          {
            "idProjects": "68a496ad936ae2dac1ee6a02",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Multi-Format Report Generation System",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a496ad936ae2dac1ee6a02",
            "idParent": null,
            "useCaseId": "68a496ad936ae2dac1ee6a00",
            "externalId": null
          },
          {
            "idProjects": "68a496ad936ae2dac1ee6a03",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Branch and General Totalization Calculator",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a496ad936ae2dac1ee6a03",
            "idParent": null,
            "useCaseId": "68a496ad936ae2dac1ee6a00",
            "externalId": null
          },
          {
            "idProjects": "68a496ad936ae2dac1ee6a04",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Code Legend and Documentation Generator",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a496ad936ae2dac1ee6a04",
            "idParent": null,
            "useCaseId": "68a496ad936ae2dac1ee6a00",
            "externalId": null
          },
          {
            "idProjects": "68a496ad936ae2dac1ee6a05",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Banking Reconciliation Integration Hub",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a496ad936ae2dac1ee6a05",
            "idParent": null,
            "useCaseId": "68a496ad936ae2dac1ee6a00",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a496ad936ae2dac1ee6a01": {
            "id": "68a496ad936ae2dac1ee6a01",
            "idProjects": "68a496ad936ae2dac1ee6a01",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a496ad936ae2dac1ee6a00",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-21-36.635__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Suspended Transaction Processing Engine",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a Bank Operations Manager, I want a core processing engine that can retrieve and classify suspended transactions from the current account system so that I can have accurate data for generating comprehensive reports. The system needs to connect to multiple database tables containing transaction data and apply business rules to categorize transactions by their status (pending, regularized, settled, transferred) and operation type. This engine should handle large volumes of transaction data efficiently and provide the foundation for all reporting capabilities. The processing should include data validation, error handling, and logging mechanisms to ensure data integrity and traceability of all operations performed on the transaction records.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "13",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-The system successfully connects to all required database tables containing transaction data\n-Transaction records are retrieved and processed without data loss or corruption\n-Transactions are correctly classified by status: pending, regularized, settled, and transferred\n-Transactions are properly categorized by operation type according to business rules\n-The processing engine handles large data volumes efficiently with acceptable performance\n-Error handling mechanisms are in place for database connection failures and data inconsistencies\n-Comprehensive logging is implemented for audit trail and troubleshooting purposes\n-Data validation ensures only valid transaction records are processed\n-The engine provides status updates during long-running processing operations",
                "values": null
              }
            ],
            "parent": null
          },
          "68a496ad936ae2dac1ee6a02": {
            "id": "68a496ad936ae2dac1ee6a02",
            "idProjects": "68a496ad936ae2dac1ee6a02",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a496ad936ae2dac1ee6a00",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-21-36.635__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Multi-Format Report Generation System",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a Bank Compliance Officer, I want a flexible report generation system that can produce detailed reports in multiple output formats so that I can distribute information to different stakeholders and systems according to their specific requirements. The system must generate printed reports for physical documentation, create files compatible with SAP system integration, and produce data exports for the Corporate system. Each output format should maintain data consistency while adapting to the specific formatting requirements of the target system or medium. The report generation should include proper formatting, headers, footers, page breaks for printed reports, and structured data formats for system integrations. The system should also handle report scheduling, batch processing, and provide options for both on-demand and automated report generation.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-Printed reports are generated with proper formatting, headers, footers, and page breaks\n-SAP-compatible files are created following the exact format specifications required by the SAP system\n-Corporate system data exports are produced in the correct structure and format\n-All output formats maintain data consistency and accuracy across different report types\n-Report generation supports both on-demand and scheduled batch processing\n-The system handles large datasets without memory issues or performance degradation\n-Error handling is implemented for file system issues and format conversion problems\n-Generated reports include proper timestamps and identification information\n-Output files are saved to designated directories with appropriate naming conventions\n-The system provides confirmation and status updates for successful report generation",
                "values": null
              }
            ],
            "parent": null
          },
          "68a496ad936ae2dac1ee6a03": {
            "id": "68a496ad936ae2dac1ee6a03",
            "idProjects": "68a496ad936ae2dac1ee6a03",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a496ad936ae2dac1ee6a00",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-21-36.635__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Branch and General Totalization Calculator",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a Financial Controller, I want an automated calculation system that computes accurate totals by branch and overall totals so that I can have consolidated financial summaries for decision-making and regulatory reporting. The system should process all classified transactions and calculate subtotals for each branch office, including breakdowns by transaction type and status. Additionally, it should compute grand totals across all branches to provide a comprehensive view of the bank's suspended transaction portfolio. The calculation engine must handle different currencies if applicable, apply proper rounding rules, and maintain mathematical accuracy throughout all computations. The system should also provide variance analysis capabilities and support drill-down functionality to trace totals back to individual transactions for audit purposes.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-Branch-level totals are calculated accurately for each office location\n-Overall totals are computed correctly across all branches\n-Subtotals are provided by transaction type and status for each branch\n-Grand totals include comprehensive summaries across all categories\n-Mathematical accuracy is maintained throughout all calculations with proper rounding\n-Currency handling is implemented correctly if multiple currencies are involved\n-Variance analysis capabilities are available to identify discrepancies\n-Drill-down functionality allows tracing totals back to source transactions\n-Calculation results are validated against control totals and checksums\n-Performance is optimized for large datasets with complex aggregation requirements",
                "values": null
              }
            ],
            "parent": null
          },
          "68a496ad936ae2dac1ee6a04": {
            "id": "68a496ad936ae2dac1ee6a04",
            "idProjects": "68a496ad936ae2dac1ee6a04",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a496ad936ae2dac1ee6a00",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-21-36.635__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Code Legend and Documentation Generator",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a Bank Operations Analyst, I want an automated system that generates comprehensive legends and explanations for all codes used in the reports so that users can easily understand and interpret the transaction data without requiring extensive training or external documentation. The system should maintain a centralized repository of all transaction codes, status codes, operation type codes, and branch codes used throughout the application. It should automatically generate explanatory legends that accompany reports, providing clear descriptions of what each code represents in business terms. The legend generator should support multiple languages if required, maintain version control for code definitions, and ensure that legends are always current and accurate. The system should also provide search and lookup capabilities for code meanings and support the addition of new codes through a controlled process.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-Comprehensive legends are automatically generated for all report codes\n-Code repository maintains current definitions for transaction, status, operation, and branch codes\n-Legends provide clear business-friendly descriptions for technical codes\n-Generated legends are properly formatted and integrated with report outputs\n-Search and lookup functionality is available for code meanings\n-Version control tracks changes to code definitions over time\n-New codes can be added through a controlled approval process\n-Multi-language support is implemented if required by business needs\n-Legend accuracy is validated against the master code repository\n-User-friendly interface allows easy maintenance of code definitions",
                "values": null
              }
            ],
            "parent": null
          },
          "68a496ad936ae2dac1ee6a05": {
            "id": "68a496ad936ae2dac1ee6a05",
            "idProjects": "68a496ad936ae2dac1ee6a05",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a496ad936ae2dac1ee6a00",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-21-36.635__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Banking Reconciliation Integration Hub",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a Bank Reconciliation Specialist, I want a centralized integration hub that consolidates data from multiple system tables and provides a unified view of all suspended transactions so that I can perform comprehensive reconciliation and audit activities efficiently. The integration hub should connect to various database tables containing transaction data, account information, branch details, and historical records to create a complete picture of each suspended transaction. It should provide real-time data synchronization capabilities, handle data conflicts and inconsistencies, and maintain data lineage for audit purposes. The system should support complex queries and filtering options to allow users to drill down into specific transaction categories, time periods, or branch operations. Additionally, it should provide APIs for external system integration and support data export capabilities for further analysis in specialized reconciliation tools.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-Integration hub successfully connects to all required system tables and data sources\n-Real-time data synchronization maintains current information across all connected systems\n-Unified view presents complete transaction information from multiple sources\n-Data conflicts and inconsistencies are identified and handled appropriately\n-Data lineage tracking provides complete audit trail for all information sources\n-Complex filtering and querying capabilities support detailed analysis requirements\n-APIs are available for external system integration and data access\n-Data export functionality supports various formats for reconciliation tools\n-Performance is optimized for handling large volumes of integrated data\n-Security measures protect sensitive financial data throughout the integration process",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Business Rules": {
        "jobId": "2025-08-19__20-49-34.185__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__20-49-34.185__Agile/results/Business Rules",
        "processDefinition": [
          {
            "idProjects": "68a4e3712479b3f77c3ad552",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Record Selection Logic for Suspended Transactions",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a4e3712479b3f77c3ad552",
            "idParent": null,
            "useCaseId": "68a4e3712479b3f77c3ad551",
            "externalId": null
          },
          {
            "idProjects": "68a4e3712479b3f77c3ad553",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Develop Transaction Classification by Status",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a4e3712479b3f77c3ad553",
            "idParent": null,
            "useCaseId": "68a4e3712479b3f77c3ad551",
            "externalId": null
          },
          {
            "idProjects": "68a4e3712479b3f77c3ad554",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Debit and Credit Separation Logic",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a4e3712479b3f77c3ad554",
            "idParent": null,
            "useCaseId": "68a4e3712479b3f77c3ad551",
            "externalId": null
          },
          {
            "idProjects": "68a4e3712479b3f77c3ad555",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Develop SAP Integration for Accounting Entries",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a4e3712479b3f77c3ad555",
            "idParent": null,
            "useCaseId": "68a4e3712479b3f77c3ad551",
            "externalId": null
          },
          {
            "idProjects": "68a4e3712479b3f77c3ad556",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Report Pagination and Filial Grouping",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a4e3712479b3f77c3ad556",
            "idParent": null,
            "useCaseId": "68a4e3712479b3f77c3ad551",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a4e3712479b3f77c3ad552": {
            "id": "68a4e3712479b3f77c3ad552",
            "idProjects": "68a4e3712479b3f77c3ad552",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3712479b3f77c3ad551",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-49-34.185__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Record Selection Logic for Suspended Transactions",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic for selecting records from the PAKF023VSUSPENSO table based on the processing date or transaction status, so that the system can accurately identify and process suspended transactions. The selection criteria should include transactions where the processing or regularization date matches the current processing date, or where the status is not '1 - Pending' or '6 - Canceled', and the situation is not 'C - Canceled'. This functionality ensures that only relevant transactions are processed.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system retrieves records from the PAKF023VSUSPENSO table based on the specified criteria.\n- Transactions with matching processing or regularization dates are selected.\n- Transactions with statuses other than '1 - Pending' and '6 - Canceled' are included.\n- Transactions with situations other than 'C - Canceled' are included.\n- The logic is tested and verified with sample data.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3712479b3f77c3ad553": {
            "id": "68a4e3712479b3f77c3ad553",
            "idProjects": "68a4e3712479b3f77c3ad553",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3712479b3f77c3ad551",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-49-34.185__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Develop Transaction Classification by Status",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the classification of transactions based on the ATSFSTATUS field, so that the system can apply specific accounting and totalization rules for each status. The statuses include '1 - Pending', '2 - Low', '3 - Regularized', '4 - Residue', and '5 - Accounting Record'. This functionality ensures that transactions are processed according to their respective statuses.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Transactions are classified based on the ATSFSTATUS field.\n- Specific accounting and totalization rules are applied for each status.\n- The classification logic is tested with sample data.\n- The system correctly handles all defined statuses.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3712479b3f77c3ad554": {
            "id": "68a4e3712479b3f77c3ad554",
            "idProjects": "68a4e3712479b3f77c3ad554",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3712479b3f77c3ad551",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-49-34.185__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Debit and Credit Separation Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic for separating transactions into debit and credit categories based on the FKNICODLANC field, so that the system can correctly classify transactions and update totalizers and accounting accounts. Transactions with codes between 999 and 2000 should be classified as debit, while others should be classified as credit.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Transactions are classified as debit if the FKNICODLANC code is between 999 and 2000.\n- Transactions are classified as credit if the FKNICODLANC code is outside the 999-2000 range.\n- Totalizers and accounting accounts are updated based on the classification.\n- The logic is tested and verified with sample data.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3712479b3f77c3ad555": {
            "id": "68a4e3712479b3f77c3ad555",
            "idProjects": "68a4e3712479b3f77c3ad555",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3712479b3f77c3ad551",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-49-34.185__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Develop SAP Integration for Accounting Entries",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the integration with SAP for generating accounting entries based on transaction types, so that the system can create debit-credit pairs using specific accounts. The accounts include Code 3412 for lows and exclusions, Code 3413 for accounting records, and Code 4412 for inclusions and transfers. This functionality ensures seamless integration with SAP for financial processing.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- SAP integration is implemented for generating accounting entries.\n- Debit-credit pairs are created using the specified accounts.\n- The system handles transaction types correctly.\n- The integration is tested and verified with sample data.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3712479b3f77c3ad556": {
            "id": "68a4e3712479b3f77c3ad556",
            "idProjects": "68a4e3712479b3f77c3ad556",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3712479b3f77c3ad551",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-49-34.185__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Report Pagination and Filial Grouping",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement report pagination and grouping by filial, so that the system can organize reports with subtotals for each filial, print summaries when filial changes, and control page breaks with headers every 55 lines. This functionality ensures that reports are well-structured and easy to read.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Reports are grouped by filial with subtotals for each filial.\n- Summaries are printed when filial changes.\n- Page breaks are controlled with headers every 55 lines.\n- Pages are numbered sequentially.\n- The functionality is tested and verified with sample data.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Dependencies": {
        "jobId": "2025-08-19__15-23-25.267__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__15-23-25.267__Agile/results/Dependencies",
        "processDefinition": [
          {
            "idProjects": "68a49716936ae2dac1ee6a09",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Database Migration Strategy and Architecture Design",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a49716936ae2dac1ee6a09",
            "idParent": null,
            "useCaseId": "68a49716936ae2dac1ee6a08",
            "externalId": null
          },
          {
            "idProjects": "68a49716936ae2dac1ee6a0a",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "COBOL Copybook Conversion to Modern Data Models",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a49716936ae2dac1ee6a0a",
            "idParent": null,
            "useCaseId": "68a49716936ae2dac1ee6a08",
            "externalId": null
          },
          {
            "idProjects": "68a49716936ae2dac1ee6a0b",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Legacy Utility Programs Modernization",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a49716936ae2dac1ee6a0b",
            "idParent": null,
            "useCaseId": "68a49716936ae2dac1ee6a08",
            "externalId": null
          },
          {
            "idProjects": "68a49716936ae2dac1ee6a0c",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Business Logic Migration and SAP Integration",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a49716936ae2dac1ee6a0c",
            "idParent": null,
            "useCaseId": "68a49716936ae2dac1ee6a08",
            "externalId": null
          },
          {
            "idProjects": "68a49716936ae2dac1ee6a0d",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "System Testing and Validation Framework",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a49716936ae2dac1ee6a0d",
            "idParent": null,
            "useCaseId": "68a49716936ae2dac1ee6a08",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a49716936ae2dac1ee6a09": {
            "id": "68a49716936ae2dac1ee6a09",
            "idProjects": "68a49716936ae2dac1ee6a09",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49716936ae2dac1ee6a08",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-23-25.267__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Database Migration Strategy and Architecture Design",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a system architect, I want to design and implement a comprehensive database migration strategy from IBM DB2 to a modern database system so that we can modernize the legacy COBOL program GO502A37 while maintaining data integrity and business continuity. This story involves analyzing all critical database dependencies including PAKF023VSUSPENSO (suspended transactions table), PAKF018VCONTROLE (processing control table), PAKF008VCONTRATO (contracts table), and other related tables. The migration must preserve all existing relationships, constraints, and business rules while adapting to modern database paradigms. Special attention must be given to the SQLCA component for SQL communication and error control, ensuring proper transaction management in the new environment. The solution should include detailed mapping documentation, data validation procedures, and rollback strategies to ensure zero data loss during the migration process.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "13",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Complete analysis and documentation of all DB2 table structures and relationships\n- Design of new database schema compatible with modern database systems\n- Creation of data migration scripts with validation checkpoints\n- Implementation of transaction control mechanisms replacing SQLCA functionality\n- Comprehensive testing plan including data integrity verification\n- Rollback procedures and disaster recovery planning\n- Performance benchmarking comparing old vs new database performance",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49716936ae2dac1ee6a0a": {
            "id": "68a49716936ae2dac1ee6a0a",
            "idProjects": "68a49716936ae2dac1ee6a0a",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49716936ae2dac1ee6a08",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-23-25.267__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "COBOL Copybook Conversion to Modern Data Models",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a software developer, I want to convert all COBOL copybooks to modern data structure definitions so that the legacy data structures can be properly represented in the new application architecture. This involves analyzing and converting critical copybooks including GO023V00 (suspended transactions structure), GO018V00 (control structure), GO008V00 (contracts structure), GN111V00 (accounting entries configuration), and others. Each copybook contains specific field definitions, data types, and layouts that must be accurately translated to modern programming language equivalents such as Java classes, C# models, or JSON schemas. The conversion process must maintain field precision, handle COBOL-specific data types like COMP-3 and packed decimals, and ensure proper data validation rules are preserved. Documentation must be created mapping each original COBOL field to its modern equivalent, including any necessary data transformation logic for seamless integration with the new system architecture.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Complete inventory and analysis of all COBOL copybooks and their dependencies\n- Creation of modern data model equivalents for each copybook structure\n- Implementation of data type conversion utilities for COBOL-specific formats\n- Validation rules and constraints properly translated to new models\n- Comprehensive mapping documentation between old and new structures\n- Unit tests covering all data conversion scenarios\n- Integration testing with database layer to ensure compatibility",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49716936ae2dac1ee6a0b": {
            "id": "68a49716936ae2dac1ee6a0b",
            "idProjects": "68a49716936ae2dac1ee6a0b",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49716936ae2dac1ee6a08",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-23-25.267__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Legacy Utility Programs Modernization",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a system integrator, I want to modernize the legacy utility programs YY035A and YY115A by replacing them with modern API-based solutions so that the system can eliminate dependencies on external COBOL programs while maintaining equivalent functionality. YY035A handles output file control and must be replaced with a modern file management service that can handle file operations, logging, and monitoring through RESTful APIs or microservices architecture. YY115A provides system date and time functionality and should be replaced with standard system libraries or cloud-based time services that offer better reliability and timezone handling. The modernization should include proper error handling, logging capabilities, and integration with the new application monitoring systems. All existing interfaces and expected outputs must be preserved to ensure seamless integration with other system components during the transition period.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Analysis and documentation of YY035A file control functionality and interfaces\n- Analysis and documentation of YY115A date/time functionality and interfaces\n- Design and implementation of modern file management API replacing YY035A\n- Implementation of standardized date/time service replacing YY115A\n- Creation of adapter layers to maintain compatibility during transition\n- Comprehensive testing of new services against legacy program outputs\n- Performance testing to ensure equivalent or better response times\n- Integration testing with dependent system components",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49716936ae2dac1ee6a0c": {
            "id": "68a49716936ae2dac1ee6a0c",
            "idProjects": "68a49716936ae2dac1ee6a0c",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49716936ae2dac1ee6a08",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-23-25.267__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Business Logic Migration and SAP Integration",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a business analyst, I want to migrate the core business logic from the COBOL program GO502A37 to a modern application architecture while ensuring seamless integration with SAP systems so that business operations can continue without disruption and benefit from improved maintainability and scalability. This involves analyzing the suspended transactions processing logic, contract management workflows, absorption processes, and accounting entry configurations. The migration must preserve all business rules related to transaction processing, control flow management, and organizational hierarchies. Special attention must be given to the PAKG111VLANCTOCON table configuration for accounting entries as it is essential for SAP integration. The new system should implement proper business rule engines, workflow management, and integration patterns that can easily interface with SAP modules while maintaining audit trails and compliance requirements.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "21",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Complete analysis and documentation of existing business logic and workflows\n- Design of modern business rule engine architecture\n- Implementation of suspended transaction processing logic\n- Implementation of contract management and absorption workflows\n- Creation of SAP integration interfaces for accounting entries\n- Implementation of organizational hierarchy and access control logic\n- Comprehensive business rule testing with various scenarios\n- End-to-end integration testing with SAP systems\n- User acceptance testing with business stakeholders",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49716936ae2dac1ee6a0d": {
            "id": "68a49716936ae2dac1ee6a0d",
            "idProjects": "68a49716936ae2dac1ee6a0d",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49716936ae2dac1ee6a08",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-23-25.267__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "System Testing and Validation Framework",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a quality assurance engineer, I want to establish a comprehensive testing and validation framework for the modernized system so that we can ensure complete functional equivalence with the legacy COBOL program while validating improved performance and maintainability. This framework must include automated regression testing comparing outputs between the legacy and modern systems, performance benchmarking to validate that the new system meets or exceeds current performance standards, data integrity validation across all migrated database tables, and end-to-end business process testing covering all critical workflows including suspended transaction processing, contract management, and SAP integration scenarios. The framework should also include load testing capabilities to validate system scalability, security testing to ensure proper access controls and data protection, and disaster recovery testing to validate backup and recovery procedures. All testing must be documented with clear pass/fail criteria and automated where possible to support continuous integration and deployment practices.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "13",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Development of automated regression test suite comparing legacy vs modern system outputs\n- Implementation of performance benchmarking tools and baseline establishment\n- Creation of data integrity validation scripts for all database tables\n- Development of end-to-end business process test scenarios\n- Implementation of load testing framework and scalability validation\n- Security testing suite covering authentication, authorization, and data protection\n- Disaster recovery testing procedures and validation\n- Test automation integration with CI/CD pipeline\n- Comprehensive test documentation and reporting capabilities",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Detailed Rules": {
        "Inicializacao do Sistema e Controle de Data de Processamento": {
          "jobId": "2025-08-19__15-24-08.950__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__15-24-08.950__Agile/results/Inicializacao do Sistema e Controle de Data de Processamento",
          "processDefinition": [
            {
              "idProjects": "68a49744936ae2dac1ee6a10",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "System Initialization and File Management Setup",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a49744936ae2dac1ee6a10",
              "idParent": null,
              "useCaseId": "68a49744936ae2dac1ee6a0f",
              "externalId": null
            },
            {
              "idProjects": "68a49744936ae2dac1ee6a11",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "System Date and Time Management Service",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a49744936ae2dac1ee6a11",
              "idParent": null,
              "useCaseId": "68a49744936ae2dac1ee6a0f",
              "externalId": null
            },
            {
              "idProjects": "68a49744936ae2dac1ee6a12",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Processing Date Control and Database Query Management",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a49744936ae2dac1ee6a12",
              "idParent": null,
              "useCaseId": "68a49744936ae2dac1ee6a0f",
              "externalId": null
            },
            {
              "idProjects": "68a49744936ae2dac1ee6a13",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Variable Initialization and Totalization Setup",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a49744936ae2dac1ee6a13",
              "idParent": null,
              "useCaseId": "68a49744936ae2dac1ee6a0f",
              "externalId": null
            },
            {
              "idProjects": "68a49744936ae2dac1ee6a14",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "SAP Account Configuration and Integration Management",
              "order": 5,
              "blocked": false,
              "children": [],
              "id": "68a49744936ae2dac1ee6a14",
              "idParent": null,
              "useCaseId": "68a49744936ae2dac1ee6a0f",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a49744936ae2dac1ee6a10": {
              "id": "68a49744936ae2dac1ee6a10",
              "idProjects": "68a49744936ae2dac1ee6a10",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a49744936ae2dac1ee6a0f",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-24-08.950__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "System Initialization and File Management Setup",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a system administrator, I want the system to properly initialize all required output files and establish the processing environment, so that the transaction processing system can operate reliably and maintain data integrity. This story involves implementing the core initialization functionality that opens all necessary output files (AD1GO002, AB1GO002, AB2GO002, AB3GO002) and prepares the system for transaction processing. The implementation must ensure that all files are properly opened and accessible before any processing begins, with appropriate error handling for file access failures. The system should validate file permissions and availability, create necessary directory structures if they don't exist, and establish proper file handles for subsequent operations. This foundational capability is critical for the overall system functionality as it establishes the basic infrastructure required for all subsequent processing operations.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "-System successfully opens all four output files: AD1GO002, AB1GO002, AB2GO002, AB3GO002\n-System validates file accessibility and permissions before proceeding\n-Appropriate error messages are displayed if any file cannot be opened\n-File handles are properly established and maintained throughout the session\n-System creates necessary directory structures if they don't exist\n-All file operations are logged for audit purposes",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a49744936ae2dac1ee6a11": {
              "id": "68a49744936ae2dac1ee6a11",
              "idProjects": "68a49744936ae2dac1ee6a11",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a49744936ae2dac1ee6a0f",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-24-08.950__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "System Date and Time Management Service",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a system operator, I want the system to accurately obtain and process current system date and time information, so that all transactions and reports are properly timestamped and processing dates are correctly established. This story involves implementing the date and time management functionality that calls the YY115A function to retrieve current system date and time, then extracts and processes the individual components (day, month, year, hour, minute) for use throughout the system. The implementation must ensure reliable date/time retrieval, proper parsing of the returned date/time values, and appropriate formatting for different system requirements. The system should handle timezone considerations, validate date/time accuracy, and provide consistent date/time formatting across all system components. This capability is essential for maintaining accurate transaction records, generating properly dated reports, and ensuring chronological consistency in all system operations.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "-System successfully calls YY115A function to retrieve current date and time\n-Date and time components are accurately extracted (day, month, year, hour, minute)\n-System handles timezone information appropriately\n-Date/time values are validated for accuracy and consistency\n-Proper error handling for date/time retrieval failures\n-Date/time formatting is consistent across all system components\n-System maintains date/time precision required for transaction processing",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a49744936ae2dac1ee6a12": {
              "id": "68a49744936ae2dac1ee6a12",
              "idProjects": "68a49744936ae2dac1ee6a12",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a49744936ae2dac1ee6a0f",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-24-08.950__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Processing Date Control and Database Query Management",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a transaction processor, I want the system to determine and validate the processing date for suspended transactions through database queries, so that transaction processing follows proper chronological order and business rules. This story involves implementing the database query functionality that executes the SQL SELECT statement to retrieve the minimum processing date from the AXG1000.PAKF018VCONTROLE table where ATSFMOVPROC is not equal to 'N'. The implementation must include comprehensive error handling for SQL operations, validation of query results, and proper conversion of retrieved dates to the required format for report titles and system processing. The system should handle database connection issues, validate SQLCODE responses, ensure data integrity, and provide meaningful error messages when database operations fail. This functionality is critical for maintaining proper transaction sequencing and ensuring that suspended transactions are processed in the correct chronological order according to business requirements.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "-System successfully executes SQL query against AXG1000.PAKF018VCONTROLE table\n-Query properly filters records where ATSFMOVPROC is not equal to 'N'\n-System validates SQLCODE and handles non-zero return codes appropriately\n-Retrieved date values are validated to ensure they are not negative or invalid\n-Error messages are displayed and processing is cancelled for invalid results\n-Date conversion to day-month-year format is implemented correctly\n-Converted dates are properly stored in report title variables\n-Database connection errors are handled gracefully with appropriate user feedback",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a49744936ae2dac1ee6a13": {
              "id": "68a49744936ae2dac1ee6a13",
              "idProjects": "68a49744936ae2dac1ee6a13",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a49744936ae2dac1ee6a0f",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-24-08.950__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Variable Initialization and Totalization Setup",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a system administrator, I want all totalization variables to be properly initialized to zero at system startup, so that calculations and accumulations start from a clean state and produce accurate results. This story involves implementing the variable initialization functionality that ensures all totalization variables used throughout the system are set to zero before any processing begins. The implementation must identify all variables that require initialization, establish a systematic approach to variable management, and ensure that the initialization process is complete and reliable. The system should maintain a registry of all totalization variables, provide verification that initialization has completed successfully, and establish proper variable scoping and lifecycle management. This foundational capability is essential for ensuring data accuracy and preventing calculation errors that could result from uninitialized or residual variable values from previous processing sessions.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "2",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "-All totalization variables are identified and documented\n-System initializes all totalization variables to zero before processing begins\n-Variable initialization process is logged and verifiable\n-System provides confirmation that initialization completed successfully\n-Proper variable scoping and lifecycle management is implemented\n-No residual values remain from previous processing sessions\n-Variable initialization is atomic and cannot be partially completed",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a49744936ae2dac1ee6a14": {
              "id": "68a49744936ae2dac1ee6a14",
              "idProjects": "68a49744936ae2dac1ee6a14",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a49744936ae2dac1ee6a0f",
              "order": 5,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-24-08.950__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "SAP Account Configuration and Integration Management",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a financial system integrator, I want the system to properly configure accounting accounts for different SAP operation types, so that financial transactions are correctly categorized and processed according to established accounting rules. This story involves implementing the SAP account configuration functionality that processes specific SAP codes (3412, 3413, 4412) and establishes the corresponding debit and credit accounts for each operation type. The implementation must define the WS06CONVCOMPLEMENTO variable for each SAP code, call the R069ACESSACONTA routine to retrieve the appropriate debit and credit accounts, and store these accounts in the corresponding WSCTDEBITO and WSCTCREDITO variables. The system should handle account retrieval errors, validate account information, ensure proper mapping between SAP codes and account types, and maintain data consistency throughout the configuration process. After successful configuration, the system must execute a COMMIT operation to confirm the transaction and ensure data persistence. This functionality is critical for maintaining proper financial controls and ensuring accurate accounting integration with SAP systems.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "13",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "-System processes all three SAP codes: 3412, 3413, and 4412\n-WS06CONVCOMPLEMENTO variable is properly defined for each SAP code\n-R069ACESSACONTA routine is successfully called for each code\n-Debit and credit accounts are retrieved and validated for each operation type\n-Account information is stored in correct WSCTDEBITO and WSCTCREDITO variables\n-System handles errors in account retrieval gracefully\n-Account mapping between SAP codes and account types is verified\n-COMMIT operation is executed successfully to confirm the transaction\n-All account configurations are logged for audit purposes",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        },
        "Processamento Principal de Transacoes Suspensas": {
          "jobId": "2025-08-19__20-49-56.076__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__20-49-56.076__Agile/results/Processamento Principal de Transacoes Suspensas",
          "processDefinition": [
            {
              "idProjects": "68a4e3882479b3f77c3ad559",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Transaction Fetch and Loop Termination Logic",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a4e3882479b3f77c3ad559",
              "idParent": null,
              "useCaseId": "68a4e3882479b3f77c3ad558",
              "externalId": null
            },
            {
              "idProjects": "68a4e3882479b3f77c3ad55a",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Validate Null Fields in Suspended Transactions",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a4e3882479b3f77c3ad55a",
              "idParent": null,
              "useCaseId": "68a4e3882479b3f77c3ad558",
              "externalId": null
            },
            {
              "idProjects": "68a4e3882479b3f77c3ad55b",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Retrieve Descriptions for Transactions and Types",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a4e3882479b3f77c3ad55b",
              "idParent": null,
              "useCaseId": "68a4e3882479b3f77c3ad558",
              "externalId": null
            },
            {
              "idProjects": "68a4e3882479b3f77c3ad55c",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Handle Branch Changes and Print Summaries",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a4e3882479b3f77c3ad55c",
              "idParent": null,
              "useCaseId": "68a4e3882479b3f77c3ad558",
              "externalId": null
            },
            {
              "idProjects": "68a4e3882479b3f77c3ad55d",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Apply Business Logic Based on Dates and Status",
              "order": 5,
              "blocked": false,
              "children": [],
              "id": "68a4e3882479b3f77c3ad55d",
              "idParent": null,
              "useCaseId": "68a4e3882479b3f77c3ad558",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a4e3882479b3f77c3ad559": {
              "id": "68a4e3882479b3f77c3ad559",
              "idProjects": "68a4e3882479b3f77c3ad559",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3882479b3f77c3ad558",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-49-56.076__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Transaction Fetch and Loop Termination Logic",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic to fetch suspended transaction records using the cursor REGISTRO and handle loop termination conditions. This includes: - Executing FETCH on the cursor REGISTRO to retrieve the next record. - Handling SQLCODE 100 to detect end-of-file, close the cursor, set CHAVEFIM to HIGHVALUES, and exit the routine. - Handling SQLCODE errors by displaying an error message and canceling the operation. This ensures the system can process transactions efficiently and handle errors gracefully.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Implement FETCH logic to retrieve records from the cursor REGISTRO.\n- Ensure SQLCODE 100 is handled to close the cursor and terminate the loop.\n- Implement error handling for non-zero SQLCODE values.\n- Verify the logic works correctly with test cases for end-of-file and error scenarios.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3882479b3f77c3ad55a": {
              "id": "68a4e3882479b3f77c3ad55a",
              "idProjects": "68a4e3882479b3f77c3ad55a",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3882479b3f77c3ad558",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-49-56.076__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Validate Null Fields in Suspended Transactions",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic to validate null fields in suspended transactions by invoking the R025VERIFICACAMPOS routine. This includes: - Ensuring the routine is called for each transaction record. - Validating all required fields to ensure data integrity. - Handling any validation errors appropriately. This ensures that the system processes only valid transactions and maintains data quality.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Implement the call to R025VERIFICACAMPOS for each transaction record.\n- Validate all required fields and ensure null values are handled.\n- Verify the validation logic with test cases for various scenarios, including valid and invalid data.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3882479b3f77c3ad55b": {
              "id": "68a4e3882479b3f77c3ad55b",
              "idProjects": "68a4e3882479b3f77c3ad55b",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3882479b3f77c3ad558",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-49-56.076__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Retrieve Descriptions for Transactions and Types",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic to retrieve descriptions for transactions and types by invoking the R094SELECTLANCTOCON and R095ACESSATIPO routines. This includes: - Calling R094SELECTLANCTOCON to obtain transaction descriptions when ATNICODSAP equals 0. - Calling R095ACESSATIPO to obtain type descriptions. - Ensuring the retrieved descriptions are correctly associated with the transaction records. This enhances the readability and usability of transaction data.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "4",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Implement the call to R094SELECTLANCTOCON for transaction descriptions.\n- Implement the call to R095ACESSATIPO for type descriptions.\n- Verify the logic with test cases to ensure descriptions are correctly retrieved and associated with transaction records.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3882479b3f77c3ad55c": {
              "id": "68a4e3882479b3f77c3ad55c",
              "idProjects": "68a4e3882479b3f77c3ad55c",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3882479b3f77c3ad558",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-49-56.076__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Handle Branch Changes and Print Summaries",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic to handle branch changes and print summaries for the previous branch. This includes: - Detecting changes in the branch by comparing WSFILIALANT with the current FKNDFILIAL. - Printing a summary for the previous branch when a change is detected. - Setting CTLIN to 70 to force a new page. - Updating WSFILIALANT with the current branch. This ensures accurate reporting and proper pagination when processing transactions across multiple branches.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "6",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Implement logic to detect branch changes by comparing WSFILIALANT with FKNDFILIAL.\n- Print summaries for the previous branch when a change is detected.\n- Ensure CTLIN is set to 70 to force a new page.\n- Verify the logic with test cases for scenarios involving branch changes and pagination.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3882479b3f77c3ad55d": {
              "id": "68a4e3882479b3f77c3ad55d",
              "idProjects": "68a4e3882479b3f77c3ad55d",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3882479b3f77c3ad558",
              "order": 5,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-49-56.076__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Apply Business Logic Based on Dates and Status",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic to apply specific business rules based on transaction dates and status. This includes: - Analyzing transaction dates and status to determine the appropriate processing logic. - Implementing the rules as specified in the requirements. - Ensuring the logic is flexible and can accommodate future changes to business rules. This ensures that transactions are processed accurately according to the defined business requirements.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "7",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Implement logic to analyze transaction dates and status.\n- Apply the specified business rules based on the analysis.\n- Verify the logic with test cases for various date and status scenarios.",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        },
        "Classificacao de Transacoes por Data e Status": {
          "jobId": "2025-08-19__20-50-17.978__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__20-50-17.978__Agile/results/Classificacao de Transacoes por Data e Status",
          "processDefinition": [
            {
              "idProjects": "68a4e3a42479b3f77c3ad560",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Pending Transactions Classification Logic",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a4e3a42479b3f77c3ad560",
              "idParent": null,
              "useCaseId": "68a4e3a42479b3f77c3ad55f",
              "externalId": null
            },
            {
              "idProjects": "68a4e3a42479b3f77c3ad561",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Daily Inclusions Classification Logic",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a4e3a42479b3f77c3ad561",
              "idParent": null,
              "useCaseId": "68a4e3a42479b3f77c3ad55f",
              "externalId": null
            },
            {
              "idProjects": "68a4e3a42479b3f77c3ad562",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Same-Day Regularization Logic",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a4e3a42479b3f77c3ad562",
              "idParent": null,
              "useCaseId": "68a4e3a42479b3f77c3ad55f",
              "externalId": null
            },
            {
              "idProjects": "68a4e3a42479b3f77c3ad563",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Previous-Day Regularization Logic",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a4e3a42479b3f77c3ad563",
              "idParent": null,
              "useCaseId": "68a4e3a42479b3f77c3ad55f",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a4e3a42479b3f77c3ad560": {
              "id": "68a4e3a42479b3f77c3ad560",
              "idProjects": "68a4e3a42479b3f77c3ad560",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3a42479b3f77c3ad55f",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-50-17.978__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Pending Transactions Classification Logic",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic for classifying pending transactions so that the system can correctly categorize and calculate totals for transactions marked as pending. \n- The logic should identify transactions where ATDTPROCSUSP is equal to PKDTDTPROC and WSATSFSTATUS equals 1. \n- Define the description as 'PENDENTE'. \n- Increment the WSQTDESALDOATU counter by 1. \n- If FKNICODLANC is between 999 and 2000, add ATNDVALORCR to WSVLRDEBATU; otherwise, add ATNDVALORCR to WSVLRCREDATU. \n- Ensure the routine exits after processing.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system correctly identifies and classifies pending transactions.\n- The WSQTDESALDOATU counter is incremented accurately.\n- The correct totals are calculated and added to either WSVLRDEBATU or WSVLRCREDATU based on the FKNICODLANC range.\n- The routine exits after processing each transaction.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3a42479b3f77c3ad561": {
              "id": "68a4e3a42479b3f77c3ad561",
              "idProjects": "68a4e3a42479b3f77c3ad561",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3a42479b3f77c3ad55f",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-50-17.978__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Daily Inclusions Classification Logic",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic for classifying daily inclusions so that the system can correctly categorize and calculate totals for transactions included on the same day. \n- The logic should identify transactions where ATDTPROCSUSP is equal to PKDTDTPROC and WSATSFSTATUS equals 1. \n- If WSATNISUSPENSOANTNN equals 1, increment WSQTDEINCLU by 1 and define the description as 'INCLUIDO DIA E PENDENTE'. \n- Otherwise, increment WSQTDETRANS by 1 and define the description as 'INCL.TRANSF. PENDENTE'. \n- Call R030IMPRIMEDET to print details. \n- Increment WSQTDESALDOATU by 1. \n- Apply the same debit/credit logic as in the pending transactions classification.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system correctly identifies and classifies daily inclusions.\n- The WSQTDEINCLU and WSQTDETRANS counters are incremented accurately based on the conditions.\n- The correct descriptions are assigned to the transactions.\n- The R030IMPRIMEDET routine is called to print details.\n- The WSQTDESALDOATU counter is incremented accurately.\n- The debit/credit logic is applied correctly.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3a42479b3f77c3ad562": {
              "id": "68a4e3a42479b3f77c3ad562",
              "idProjects": "68a4e3a42479b3f77c3ad562",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3a42479b3f77c3ad55f",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-50-17.978__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Same-Day Regularization Logic",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic for classifying transactions with same-day regularization so that the system can correctly categorize and calculate totals for these transactions. \n- The logic should identify transactions where ATDTPROCSUSP is equal to PKDTDTPROC, ATDTREGULAR is equal to PKDTDTPROC, and WSATSFSTATUS equals 1. \n- Call R037VERIFABSORCAO to verify absorption. \n- If absorption exists, define the description as 'ABSORCAO'; otherwise, use the description from the transaction entry. \n- Define an additional description as 'INCLUIDO DIA'. \n- Print details twice: once for inclusion and once for regularization. \n- Apply calculations based on the final status.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system correctly identifies and classifies transactions with same-day regularization.\n- The R037VERIFABSORCAO routine is called to verify absorption.\n- The correct descriptions are assigned based on the absorption check and transaction entry.\n- Details are printed twice as required.\n- Calculations are applied accurately based on the final status.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3a42479b3f77c3ad563": {
              "id": "68a4e3a42479b3f77c3ad563",
              "idProjects": "68a4e3a42479b3f77c3ad563",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3a42479b3f77c3ad55f",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-50-17.978__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Previous-Day Regularization Logic",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic for classifying transactions with regularization from previous days so that the system can correctly categorize and calculate totals for these transactions. \n- The logic should identify transactions where ATDTREGULAR is not equal to PKDTDTPROC and WSATSFSTATUS equals 1. \n- Call R050VESTATUS to define the status description. \n- Print details for the transaction. \n- Apply calculations based on the final status.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system correctly identifies and classifies transactions with regularization from previous days.\n- The R050VESTATUS routine is called to define the status description.\n- Details are printed accurately for each transaction.\n- Calculations are applied accurately based on the final status.",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        },
        "Calculo de Totalizadores por Status": {
          "jobId": "2025-08-19__20-50-45.245__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__20-50-45.245__Agile/results/Calculo de Totalizadores por Status",
          "processDefinition": [
            {
              "idProjects": "68a4e3b92479b3f77c3ad566",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Determination of Debit and Credit Transactions",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a4e3b92479b3f77c3ad566",
              "idParent": null,
              "useCaseId": "68a4e3b92479b3f77c3ad565",
              "externalId": null
            },
            {
              "idProjects": "68a4e3b92479b3f77c3ad567",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Develop Calculations for Debit Transactions by Status",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a4e3b92479b3f77c3ad567",
              "idParent": null,
              "useCaseId": "68a4e3b92479b3f77c3ad565",
              "externalId": null
            },
            {
              "idProjects": "68a4e3b92479b3f77c3ad568",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Develop Calculations for Credit Transactions by Status",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a4e3b92479b3f77c3ad568",
              "idParent": null,
              "useCaseId": "68a4e3b92479b3f77c3ad565",
              "externalId": null
            },
            {
              "idProjects": "68a4e3b92479b3f77c3ad569",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Calculations for Inclusion Transactions",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a4e3b92479b3f77c3ad569",
              "idParent": null,
              "useCaseId": "68a4e3b92479b3f77c3ad565",
              "externalId": null
            },
            {
              "idProjects": "68a4e3b92479b3f77c3ad56a",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Create Unit Tests for Totalization Logic",
              "order": 5,
              "blocked": false,
              "children": [],
              "id": "68a4e3b92479b3f77c3ad56a",
              "idParent": null,
              "useCaseId": "68a4e3b92479b3f77c3ad565",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a4e3b92479b3f77c3ad566": {
              "id": "68a4e3b92479b3f77c3ad566",
              "idProjects": "68a4e3b92479b3f77c3ad566",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3b92479b3f77c3ad565",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-50-45.245__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Determination of Debit and Credit Transactions",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic for determining whether a transaction is a debit or credit based on the transaction code (FKNICODLANC). This functionality will ensure that transactions are correctly categorized as debit or credit, which is essential for accurate calculations. The logic should check if FKNICODLANC is between 999 and 2000 to classify the transaction as DEBITO; otherwise, classify it as CREDITO. This rule is foundational for subsequent calculations and must be implemented with high accuracy.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "The system must correctly classify transactions as DEBITO or CREDITO based on the provided logic. Unit tests must cover edge cases for transaction codes outside the specified range. The implementation must be modular and reusable for future enhancements.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3b92479b3f77c3ad567": {
              "id": "68a4e3b92479b3f77c3ad567",
              "idProjects": "68a4e3b92479b3f77c3ad567",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3b92479b3f77c3ad565",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-50-45.245__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Develop Calculations for Debit Transactions by Status",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement calculations for debit transactions based on their status. This functionality will ensure that debit transactions are processed correctly for different statuses, including Baixa (Status 2), Reg.Contabil (Status 5), and other statuses. For Baixa, update WSVLRDEBBAIXA and WSQTDEBAIXA. For Reg.Contabil, update WSVLRDEBREGCTB, WSQTDEREGCTB, and WSQTDE1REGCTB. For other statuses, update WSVLRDEBEXCL and WSQTDEEXCL. The implementation must follow the provided algorithm and ensure data integrity.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "The system must correctly calculate debit values and quantities for each status. Unit tests must validate calculations for all statuses. The implementation must be efficient and scalable for large datasets.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3b92479b3f77c3ad568": {
              "id": "68a4e3b92479b3f77c3ad568",
              "idProjects": "68a4e3b92479b3f77c3ad568",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3b92479b3f77c3ad565",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-50-45.245__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Develop Calculations for Credit Transactions by Status",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement calculations for credit transactions based on their status. This functionality will ensure that credit transactions are processed correctly for different statuses, including Baixa (Status 2), Reg.Contabil (Status 5), and other statuses. For Baixa, update WSVLRCREDBAIXA and WSQTDEBAIXA. For Reg.Contabil, update WSVLRCREDREGCTB, WSQTDEREGCTB, and WSQTDE1REGCTB. For other statuses, update WSVLRCREDEXCL and WSQTDEEXCL. The implementation must follow the provided algorithm and ensure data integrity.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "The system must correctly calculate credit values and quantities for each status. Unit tests must validate calculations for all statuses. The implementation must be efficient and scalable for large datasets.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3b92479b3f77c3ad569": {
              "id": "68a4e3b92479b3f77c3ad569",
              "idProjects": "68a4e3b92479b3f77c3ad569",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3b92479b3f77c3ad565",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-50-45.245__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Calculations for Inclusion Transactions",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement calculations for inclusion transactions based on the WSATNISUSPENSOANTNN flag. This functionality will ensure that inclusion transactions are processed correctly for both debit and credit scenarios. If WSATNISUSPENSOANTNN equals 1, update WSVLRDEBINCLU for debit and WSVLRCREDINCLU for credit. Otherwise, update WSVLRDEBTRANS for debit and WSVLRCREDTRANS for credit. The implementation must follow the provided algorithm and ensure data integrity.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "The system must correctly calculate inclusion values for both debit and credit scenarios. Unit tests must validate calculations for all possible flag values. The implementation must be efficient and scalable for large datasets.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3b92479b3f77c3ad56a": {
              "id": "68a4e3b92479b3f77c3ad56a",
              "idProjects": "68a4e3b92479b3f77c3ad56a",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3b92479b3f77c3ad565",
              "order": 5,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-50-45.245__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Create Unit Tests for Totalization Logic",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to create comprehensive unit tests for the totalization logic implemented in R020PROCESSA. This functionality will ensure that all calculations for debit, credit, and inclusion transactions are accurate and meet the requirements. Unit tests must cover edge cases, including invalid transaction codes, unexpected status values, and incorrect flag values. The tests must validate the integrity of all calculated fields, including WSVLRDEBBAIXA, WSVLRDEBREGCTB, WSVLRDEBEXCL, WSVLRCREDBAIXA, WSVLRCREDREGCTB, WSVLRCREDEXCL, WSVLRDEBINCLU, WSVLRCREDINCLU, WSVLRDEBTRANS, and WSVLRCREDTRANS.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "Unit tests must achieve 100% coverage for the totalization logic. All tests must pass successfully without errors. The tests must be documented and easily maintainable for future updates.",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        },
        "Calculo de Saldos e Totais por Filial": {
          "jobId": "2025-08-19__20-51-07.120__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__20-51-07.120__Agile/results/Calculo de Saldos e Totais por Filial",
          "processDefinition": [
            {
              "idProjects": "68a4e3d12479b3f77c3ad56d",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Calculation of Previous Balances",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a4e3d12479b3f77c3ad56d",
              "idParent": null,
              "useCaseId": "68a4e3d12479b3f77c3ad56c",
              "externalId": null
            },
            {
              "idProjects": "68a4e3d12479b3f77c3ad56e",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Calculation of Current Balances",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a4e3d12479b3f77c3ad56e",
              "idParent": null,
              "useCaseId": "68a4e3d12479b3f77c3ad56c",
              "externalId": null
            },
            {
              "idProjects": "68a4e3d12479b3f77c3ad56f",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Account Balance Calculation",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a4e3d12479b3f77c3ad56f",
              "idParent": null,
              "useCaseId": "68a4e3d12479b3f77c3ad56c",
              "externalId": null
            },
            {
              "idProjects": "68a4e3d12479b3f77c3ad570",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Consolidation of Totals by Branch",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a4e3d12479b3f77c3ad570",
              "idParent": null,
              "useCaseId": "68a4e3d12479b3f77c3ad56c",
              "externalId": null
            },
            {
              "idProjects": "68a4e3d12479b3f77c3ad571",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Reset of Totals for Next Branch",
              "order": 5,
              "blocked": false,
              "children": [],
              "id": "68a4e3d12479b3f77c3ad571",
              "idParent": null,
              "useCaseId": "68a4e3d12479b3f77c3ad56c",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a4e3d12479b3f77c3ad56d": {
              "id": "68a4e3d12479b3f77c3ad56d",
              "idProjects": "68a4e3d12479b3f77c3ad56d",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3d12479b3f77c3ad56c",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-51-07.120__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Calculation of Previous Balances",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "This user story involves implementing the calculation of previous balances for a branch. The calculation includes the following components: WSQTDESALDOANT, WSVLRDEBANT, WSVLRCREDANT, and other related variables. The goal is to ensure accurate computation of previous balances based on the provided algorithm. The implementation should handle all necessary data inputs and outputs, ensuring the results are consistent with the business rules.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system must calculate WSQTDESALDOANT, WSVLRDEBANT, and WSVLRCREDANT accurately.\n- The results must match the expected values based on test cases.\n- The implementation must handle edge cases, such as missing or invalid data inputs.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3d12479b3f77c3ad56e": {
              "id": "68a4e3d12479b3f77c3ad56e",
              "idProjects": "68a4e3d12479b3f77c3ad56e",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3d12479b3f77c3ad56c",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-51-07.120__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Calculation of Current Balances",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "This user story involves implementing the calculation of current balances for a branch. The calculation includes variables such as WSQTDESALDOATU, WSVLRDEBATU, and WSVLRCREDATU. The goal is to ensure accurate computation of current balances based on the provided algorithm. The implementation should integrate seamlessly with the previous balance calculations and ensure data consistency.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system must calculate WSQTDESALDOATU, WSVLRDEBATU, and WSVLRCREDATU accurately.\n- The results must match the expected values based on test cases.\n- The implementation must ensure data consistency with previous balance calculations.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3d12479b3f77c3ad56f": {
              "id": "68a4e3d12479b3f77c3ad56f",
              "idProjects": "68a4e3d12479b3f77c3ad56f",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3d12479b3f77c3ad56c",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-51-07.120__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Account Balance Calculation",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "This user story involves implementing the calculation of account balances for a branch. The calculation includes variables such as WSSALDOCONTA, WSVLRCREDATU, and WSVLRDEBATU. The goal is to ensure accurate computation of account balances based on the provided algorithm. The implementation should ensure that the account balance is derived correctly from the current credit and debit values.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system must calculate WSSALDOCONTA accurately based on WSVLRCREDATU and WSVLRDEBATU.\n- The results must match the expected values based on test cases.\n- The implementation must handle edge cases, such as zero or negative balances.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3d12479b3f77c3ad570": {
              "id": "68a4e3d12479b3f77c3ad570",
              "idProjects": "68a4e3d12479b3f77c3ad570",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3d12479b3f77c3ad56c",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-51-07.120__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Consolidation of Totals by Branch",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "This user story involves implementing the consolidation of totals for a branch. The calculation includes variables such as WSTOTQTDSDANT, WSTOTDEBANT, WSTOTCREDANT, and other related totals. The goal is to ensure accurate accumulation of totals for all relevant categories, including previous balances, current balances, and account balances. The implementation should ensure that the totals are correctly aggregated and stored for reporting purposes.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system must calculate and consolidate totals for all relevant categories accurately.\n- The results must match the expected values based on test cases.\n- The implementation must ensure that the totals are correctly stored and available for reporting.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3d12479b3f77c3ad571": {
              "id": "68a4e3d12479b3f77c3ad571",
              "idProjects": "68a4e3d12479b3f77c3ad571",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3d12479b3f77c3ad56c",
              "order": 5,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-51-07.120__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Reset of Totals for Next Branch",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "This user story involves implementing the reset of totals for the next branch. The process includes initializing the WSTOTAIS structure with zeros to ensure that the totals from the previous branch do not interfere with the calculations for the next branch. The goal is to ensure data isolation and accuracy in the financial summary generation process.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system must reset the WSTOTAIS structure to zeros before processing the next branch.\n- The implementation must ensure that no residual data from the previous branch affects the calculations for the next branch.\n- The reset process must be efficient and not introduce significant performance overhead.",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        },
        "Geracao de Lancamentos SAP": {
          "jobId": "2025-08-19__15-28-13.811__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__15-28-13.811__Agile/results/Geracao de Lancamentos SAP",
          "processDefinition": [
            {
              "idProjects": "68a49830936ae2dac1ee6a1b",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement SAP Totals Calculation Engine",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a49830936ae2dac1ee6a1b",
              "idParent": null,
              "useCaseId": "68a49830936ae2dac1ee6a1a",
              "externalId": null
            },
            {
              "idProjects": "68a49830936ae2dac1ee6a1c",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Create SAP Entry Generation for Inclusions and Transfers",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a49830936ae2dac1ee6a1c",
              "idParent": null,
              "useCaseId": "68a49830936ae2dac1ee6a1a",
              "externalId": null
            },
            {
              "idProjects": "68a49830936ae2dac1ee6a1d",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Create SAP Entry Generation for Write-offs and Exclusions",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a49830936ae2dac1ee6a1d",
              "idParent": null,
              "useCaseId": "68a49830936ae2dac1ee6a1a",
              "externalId": null
            },
            {
              "idProjects": "68a49830936ae2dac1ee6a1e",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement R067GRAVASAP SAP Record Writing Function",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a49830936ae2dac1ee6a1e",
              "idParent": null,
              "useCaseId": "68a49830936ae2dac1ee6a1a",
              "externalId": null
            },
            {
              "idProjects": "68a49830936ae2dac1ee6a1f",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Create SAP Entry Generation for Accounting Records",
              "order": 5,
              "blocked": false,
              "children": [],
              "id": "68a49830936ae2dac1ee6a1f",
              "idParent": null,
              "useCaseId": "68a49830936ae2dac1ee6a1a",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a49830936ae2dac1ee6a1b": {
              "id": "68a49830936ae2dac1ee6a1b",
              "idProjects": "68a49830936ae2dac1ee6a1b",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a49830936ae2dac1ee6a1a",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-28-13.811__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement SAP Totals Calculation Engine",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a financial system user, I want the system to calculate totals for SAP integration so that accounting entries can be properly generated based on different operation types. The system needs to calculate various totals including WSTOTALCREDI (sum of WSTOTCREDINCLU and WSTOTCREDTRANS for inclusions and transfers), WSTOTALCREDB (sum of WSTOTCREDBAIXA and WSTOTCREDEXCL for write-offs and exclusions), and WSTOTCREDREGCTB for accounting records. These calculations serve as the foundation for generating proper debit and credit entries in SAP format. The calculation engine must handle different operation types and ensure accurate totals that will be used by subsequent SAP entry generation processes.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "System calculates WSTOTALCREDI as sum of inclusions and transfers. System calculates WSTOTALCREDB as sum of write-offs and exclusions. System calculates WSTOTCREDREGCTB for accounting records. All calculated totals are available for SAP entry generation. Calculation results are validated and logged for audit purposes.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a49830936ae2dac1ee6a1c": {
              "id": "68a49830936ae2dac1ee6a1c",
              "idProjects": "68a49830936ae2dac1ee6a1c",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a49830936ae2dac1ee6a1a",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-28-13.811__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Create SAP Entry Generation for Inclusions and Transfers",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a financial system user, I want the system to generate SAP accounting entries for inclusions and transfers so that these operations are properly recorded in the SAP system. When WSTOTALCREDI is greater than 0, the system should create an accounting entry with SAP code 4412, using the configured debit account (WSCTDEBITO4412) and credit account (WSCTCREDITO4412), with the calculated total value (WSTOTALCREDI). The system must call the R067GRAVASAP function to persist the entry data. This functionality ensures that all inclusion and transfer operations are accurately reflected in the SAP accounting system with proper debit and credit balancing.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "System checks if WSTOTALCREDI is greater than 0. System generates SAP entry with code 4412 for inclusions/transfers. System uses correct debit account WSCTDEBITO4412. System uses correct credit account WSCTCREDITO4412. System sets entry value to WSTOTALCREDI. System calls R067GRAVASAP function to save the entry. Entry generation is logged for audit trail.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a49830936ae2dac1ee6a1d": {
              "id": "68a49830936ae2dac1ee6a1d",
              "idProjects": "68a49830936ae2dac1ee6a1d",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a49830936ae2dac1ee6a1a",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-28-13.811__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Create SAP Entry Generation for Write-offs and Exclusions",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a financial system user, I want the system to generate SAP accounting entries for write-offs and exclusions so that these operations are properly recorded in the SAP system. When WSTOTALCREDB is greater than 0, the system should create an accounting entry with SAP code 3412, using the configured debit account (WSCTDEBITO3412) and credit account (WSCTCREDITO3412), with the calculated total value (WSTOTALCREDB). The system must call the R067GRAVASAP function to persist the entry data. This functionality ensures that all write-off and exclusion operations are accurately reflected in the SAP accounting system with proper debit and credit balancing, maintaining financial integrity.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "System checks if WSTOTALCREDB is greater than 0. System generates SAP entry with code 3412 for write-offs/exclusions. System uses correct debit account WSCTDEBITO3412. System uses correct credit account WSCTCREDITO3412. System sets entry value to WSTOTALCREDB. System calls R067GRAVASAP function to save the entry. Entry generation is logged for audit trail.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a49830936ae2dac1ee6a1e": {
              "id": "68a49830936ae2dac1ee6a1e",
              "idProjects": "68a49830936ae2dac1ee6a1e",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a49830936ae2dac1ee6a1a",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-28-13.811__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement R067GRAVASAP SAP Record Writing Function",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a financial system user, I want the system to have a robust R067GRAVASAP function that writes accounting records to SAP format so that all generated entries are properly structured and stored. The function must create SAP records with specific structure including WS012CORPORA (E04), processing date components (WS012DIA, WS012MES, WS012ANO), WS012FIL (00), WS012EVENTO (GO002A), complete processing date (WS012DTREF), calculated value (WS012VALOR), and document type (WS012TDOC as GO). For each accounting entry, the function must generate exactly two records: one DEBIT record (WS012DC as D with debit account) and one CREDIT record (WS012DC as C with credit account). The function must handle cost center logic where code 4412 entries have blank cost centers (WS012CL empty), while other codes use WS012CL as L with WS012CENTRO1 as 130 and WS012CENTRO2 as 100.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "13",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "Function creates SAP record structure with all required fields. Function sets WS012CORPORA to E04 and WS012FIL to 00. Function populates date fields from processing date. Function sets WS012EVENTO to GO002A and WS012TDOC to GO. Function generates exactly 2 records per entry (debit and credit). Function handles cost center logic based on SAP code. Function validates all field values before writing. Function provides error handling and logging.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a49830936ae2dac1ee6a1f": {
              "id": "68a49830936ae2dac1ee6a1f",
              "idProjects": "68a49830936ae2dac1ee6a1f",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a49830936ae2dac1ee6a1a",
              "order": 5,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-28-13.811__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Create SAP Entry Generation for Accounting Records",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a financial system user, I want the system to generate SAP accounting entries for general accounting records so that all accounting operations are properly integrated with SAP. When WSTOTCREDREGCTB is greater than 0, the system should create an accounting entry with SAP code 3413, using the configured debit account (WSCTDEBITO3413) and credit account (WSCTCREDITO3413), with the calculated total value (WSTOTCREDREGCTB). The system must call the R067GRAVASAP function to persist the entry data. This functionality completes the SAP integration by ensuring that general accounting records are also properly reflected in the SAP system, maintaining comprehensive financial data synchronization across all operation types.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "System checks if WSTOTCREDREGCTB is greater than 0. System generates SAP entry with code 3413 for accounting records. System uses correct debit account WSCTDEBITO3413. System uses correct credit account WSCTCREDITO3413. System sets entry value to WSTOTCREDREGCTB. System calls R067GRAVASAP function to save the entry. Entry generation is logged for audit trail. Integration with SAP is validated and confirmed.",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        },
        "Geracao de Registros Corporate": {
          "jobId": "2025-08-19__20-51-34.538__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__20-51-34.538__Agile/results/Geracao de Registros Corporate",
          "processDefinition": [
            {
              "idProjects": "68a4e3f92479b3f77c3ad574",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Develop Standardized Record Generation for Corporate System",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a4e3f92479b3f77c3ad574",
              "idParent": null,
              "useCaseId": "68a4e3f92479b3f77c3ad573",
              "externalId": null
            },
            {
              "idProjects": "68a4e3f92479b3f77c3ad575",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Business Rules for Transaction Classification",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a4e3f92479b3f77c3ad575",
              "idParent": null,
              "useCaseId": "68a4e3f92479b3f77c3ad573",
              "externalId": null
            },
            {
              "idProjects": "68a4e3f92479b3f77c3ad576",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Develop Integration with SAP for Financial Postings",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a4e3f92479b3f77c3ad576",
              "idParent": null,
              "useCaseId": "68a4e3f92479b3f77c3ad573",
              "externalId": null
            },
            {
              "idProjects": "68a4e3f92479b3f77c3ad577",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Financial Calculations for Account Balances",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a4e3f92479b3f77c3ad577",
              "idParent": null,
              "useCaseId": "68a4e3f92479b3f77c3ad573",
              "externalId": null
            },
            {
              "idProjects": "68a4e3f92479b3f77c3ad578",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Modernize Data Structures for Transaction Processing",
              "order": 5,
              "blocked": false,
              "children": [],
              "id": "68a4e3f92479b3f77c3ad578",
              "idParent": null,
              "useCaseId": "68a4e3f92479b3f77c3ad573",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a4e3f92479b3f77c3ad574": {
              "id": "68a4e3f92479b3f77c3ad574",
              "idProjects": "68a4e3f92479b3f77c3ad574",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3f92479b3f77c3ad573",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-51-34.538__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Develop Standardized Record Generation for Corporate System",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement a functionality to generate standardized records for integration with the Corporate system. This functionality will ensure that detailed transaction data is accurately captured and formatted according to the specified structure. The implementation will include the following:\n- Define and initialize the data structures required for processing suspended transactions, including input, output, and essential working variables.\n- Map all relevant fields such as PKNISUSPENSO (primary key), FKNICONTRATO (foreign key), ATNDVALORCR (transaction value), and others as described in the provided data structure.\n- Implement validation rules for mandatory fields, ensuring that critical fields like transaction status (ATSFSTATUS) and processing date (ATDTPROCSUSP) are always populated.\n- Develop logic to handle null fields by converting them to default values (e.g., zeros or spaces).\n- Ensure compatibility with the Corporate system by adhering to the specified data formats and field sizes.\n- Include error handling for SQL operations and ensure proper logging of any issues encountered during record generation.\n- Test the functionality with various scenarios to validate the accuracy and reliability of the generated records.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system must generate standardized records for all transactions, adhering to the specified data structure.\n- Mandatory fields must be validated and populated correctly.\n- Null fields must be converted to default values as specified.\n- The generated records must be compatible with the Corporate system's integration requirements.\n- Error handling and logging must be implemented for all SQL operations.\n- The functionality must pass all test scenarios, including edge cases.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3f92479b3f77c3ad575": {
              "id": "68a4e3f92479b3f77c3ad575",
              "idProjects": "68a4e3f92479b3f77c3ad575",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3f92479b3f77c3ad573",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-51-34.538__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Business Rules for Transaction Classification",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement business rules for classifying transactions based on their status and date. This will ensure accurate processing and categorization of transactions. The implementation will include the following:\n- Develop logic to classify transactions by their status (e.g., Pending, Settled, Regularized) using the ATSFSTATUS field.\n- Implement rules for determining debit or credit transactions based on the FKNICODLANC field.\n- Ensure that the classification logic adheres to the specified business rules and handles edge cases.\n- Validate the accuracy of the classification by cross-referencing with related tables and fields.\n- Include error handling for scenarios where classification criteria are not met or data is inconsistent.\n- Test the classification logic with a variety of transaction scenarios to ensure reliability and accuracy.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Transactions must be classified accurately based on their status and date.\n- Debit and credit transactions must be determined correctly using the FKNICODLANC field.\n- The classification logic must handle edge cases and inconsistent data gracefully.\n- All classification rules must pass validation tests and meet the specified business requirements.\n- Error handling must be implemented for scenarios where classification criteria are not met.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3f92479b3f77c3ad576": {
              "id": "68a4e3f92479b3f77c3ad576",
              "idProjects": "68a4e3f92479b3f77c3ad576",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3f92479b3f77c3ad573",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-51-34.538__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Develop Integration with SAP for Financial Postings",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to create an integration with the SAP system for financial postings. This will ensure seamless communication and data exchange between the systems. The implementation will include the following:\n- Map the required fields for SAP integration, including WS012CORPORA (corporate code), WS012DATA (posting date), WS012CONTA (account number), WS012DC (debit/credit indicator), and WS012VALOR (posting value).\n- Develop logic to generate SAP-compatible records for financial postings.\n- Implement error handling for scenarios where data does not meet SAP requirements.\n- Ensure that the integration adheres to SAP's data format and validation rules.\n- Test the integration with various financial posting scenarios to validate accuracy and reliability.\n- Include logging and monitoring to track the success and failure of SAP postings.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system must generate SAP-compatible records for all financial postings.\n- All required fields for SAP integration must be mapped and populated correctly.\n- Error handling must be implemented for scenarios where data does not meet SAP requirements.\n- The integration must pass all test scenarios, including edge cases.\n- Logging and monitoring must be implemented to track the success and failure of SAP postings.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3f92479b3f77c3ad577": {
              "id": "68a4e3f92479b3f77c3ad577",
              "idProjects": "68a4e3f92479b3f77c3ad577",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3f92479b3f77c3ad573",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-51-34.538__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Financial Calculations for Account Balances",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement financial calculations for account balances to ensure accurate reporting and processing. This will include the following:\n- Develop formulas to calculate previous and current balances, including inclusions, transfers, settlements, exclusions, and accounting records.\n- Implement logic to calculate the account balance as the difference between current credits and debits.\n- Ensure that all calculations adhere to the specified business rules and handle edge cases.\n- Validate the accuracy of the calculations by cross-referencing with related data.\n- Include error handling for scenarios where data is inconsistent or missing.\n- Test the financial calculations with various scenarios to ensure reliability and accuracy.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Previous and current balances must be calculated accurately based on the specified formulas.\n- The account balance must be calculated as the difference between current credits and debits.\n- All calculations must adhere to the specified business rules and handle edge cases.\n- The accuracy of the calculations must be validated against related data.\n- Error handling must be implemented for scenarios where data is inconsistent or missing.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4e3f92479b3f77c3ad578": {
              "id": "68a4e3f92479b3f77c3ad578",
              "idProjects": "68a4e3f92479b3f77c3ad578",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4e3f92479b3f77c3ad573",
              "order": 5,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__20-51-34.538__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Modernize Data Structures for Transaction Processing",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to modernize the data structures used for transaction processing to improve performance and maintainability. This will include the following:\n- Redesign the data structures to replace COBOL-based layouts with modern equivalents.\n- Optimize the data structures for better performance and scalability.\n- Ensure compatibility with existing business rules and processing logic.\n- Implement caching mechanisms for frequently accessed data to reduce database load.\n- Validate the new data structures with various transaction scenarios to ensure accuracy and reliability.\n- Include documentation and training materials for the new data structures.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The new data structures must replace COBOL-based layouts with modern equivalents.\n- Performance and scalability must be improved with the redesigned data structures.\n- Compatibility with existing business rules and processing logic must be maintained.\n- Caching mechanisms must be implemented for frequently accessed data.\n- The new data structures must pass validation tests with various transaction scenarios.\n- Documentation and training materials must be provided for the new data structures.",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        }
      },
      "Inicializacao do Sistema e Controle de Data de Processamento": {
        "jobId": "2025-08-19__15-24-08.950__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__15-24-08.950__Agile/results/Inicializacao do Sistema e Controle de Data de Processamento",
        "processDefinition": [
          {
            "idProjects": "68a49744936ae2dac1ee6a10",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "System Initialization and File Management Setup",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a49744936ae2dac1ee6a10",
            "idParent": null,
            "useCaseId": "68a49744936ae2dac1ee6a0f",
            "externalId": null
          },
          {
            "idProjects": "68a49744936ae2dac1ee6a11",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "System Date and Time Management Service",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a49744936ae2dac1ee6a11",
            "idParent": null,
            "useCaseId": "68a49744936ae2dac1ee6a0f",
            "externalId": null
          },
          {
            "idProjects": "68a49744936ae2dac1ee6a12",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Processing Date Control and Database Query Management",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a49744936ae2dac1ee6a12",
            "idParent": null,
            "useCaseId": "68a49744936ae2dac1ee6a0f",
            "externalId": null
          },
          {
            "idProjects": "68a49744936ae2dac1ee6a13",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Variable Initialization and Totalization Setup",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a49744936ae2dac1ee6a13",
            "idParent": null,
            "useCaseId": "68a49744936ae2dac1ee6a0f",
            "externalId": null
          },
          {
            "idProjects": "68a49744936ae2dac1ee6a14",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "SAP Account Configuration and Integration Management",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a49744936ae2dac1ee6a14",
            "idParent": null,
            "useCaseId": "68a49744936ae2dac1ee6a0f",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a49744936ae2dac1ee6a10": {
            "id": "68a49744936ae2dac1ee6a10",
            "idProjects": "68a49744936ae2dac1ee6a10",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49744936ae2dac1ee6a0f",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-24-08.950__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "System Initialization and File Management Setup",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a system administrator, I want the system to properly initialize all required output files and establish the processing environment, so that the transaction processing system can operate reliably and maintain data integrity. This story involves implementing the core initialization functionality that opens all necessary output files (AD1GO002, AB1GO002, AB2GO002, AB3GO002) and prepares the system for transaction processing. The implementation must ensure that all files are properly opened and accessible before any processing begins, with appropriate error handling for file access failures. The system should validate file permissions and availability, create necessary directory structures if they don't exist, and establish proper file handles for subsequent operations. This foundational capability is critical for the overall system functionality as it establishes the basic infrastructure required for all subsequent processing operations.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-System successfully opens all four output files: AD1GO002, AB1GO002, AB2GO002, AB3GO002\n-System validates file accessibility and permissions before proceeding\n-Appropriate error messages are displayed if any file cannot be opened\n-File handles are properly established and maintained throughout the session\n-System creates necessary directory structures if they don't exist\n-All file operations are logged for audit purposes",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49744936ae2dac1ee6a11": {
            "id": "68a49744936ae2dac1ee6a11",
            "idProjects": "68a49744936ae2dac1ee6a11",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49744936ae2dac1ee6a0f",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-24-08.950__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "System Date and Time Management Service",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a system operator, I want the system to accurately obtain and process current system date and time information, so that all transactions and reports are properly timestamped and processing dates are correctly established. This story involves implementing the date and time management functionality that calls the YY115A function to retrieve current system date and time, then extracts and processes the individual components (day, month, year, hour, minute) for use throughout the system. The implementation must ensure reliable date/time retrieval, proper parsing of the returned date/time values, and appropriate formatting for different system requirements. The system should handle timezone considerations, validate date/time accuracy, and provide consistent date/time formatting across all system components. This capability is essential for maintaining accurate transaction records, generating properly dated reports, and ensuring chronological consistency in all system operations.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-System successfully calls YY115A function to retrieve current date and time\n-Date and time components are accurately extracted (day, month, year, hour, minute)\n-System handles timezone information appropriately\n-Date/time values are validated for accuracy and consistency\n-Proper error handling for date/time retrieval failures\n-Date/time formatting is consistent across all system components\n-System maintains date/time precision required for transaction processing",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49744936ae2dac1ee6a12": {
            "id": "68a49744936ae2dac1ee6a12",
            "idProjects": "68a49744936ae2dac1ee6a12",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49744936ae2dac1ee6a0f",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-24-08.950__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Processing Date Control and Database Query Management",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a transaction processor, I want the system to determine and validate the processing date for suspended transactions through database queries, so that transaction processing follows proper chronological order and business rules. This story involves implementing the database query functionality that executes the SQL SELECT statement to retrieve the minimum processing date from the AXG1000.PAKF018VCONTROLE table where ATSFMOVPROC is not equal to 'N'. The implementation must include comprehensive error handling for SQL operations, validation of query results, and proper conversion of retrieved dates to the required format for report titles and system processing. The system should handle database connection issues, validate SQLCODE responses, ensure data integrity, and provide meaningful error messages when database operations fail. This functionality is critical for maintaining proper transaction sequencing and ensuring that suspended transactions are processed in the correct chronological order according to business requirements.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-System successfully executes SQL query against AXG1000.PAKF018VCONTROLE table\n-Query properly filters records where ATSFMOVPROC is not equal to 'N'\n-System validates SQLCODE and handles non-zero return codes appropriately\n-Retrieved date values are validated to ensure they are not negative or invalid\n-Error messages are displayed and processing is cancelled for invalid results\n-Date conversion to day-month-year format is implemented correctly\n-Converted dates are properly stored in report title variables\n-Database connection errors are handled gracefully with appropriate user feedback",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49744936ae2dac1ee6a13": {
            "id": "68a49744936ae2dac1ee6a13",
            "idProjects": "68a49744936ae2dac1ee6a13",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49744936ae2dac1ee6a0f",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-24-08.950__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Variable Initialization and Totalization Setup",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a system administrator, I want all totalization variables to be properly initialized to zero at system startup, so that calculations and accumulations start from a clean state and produce accurate results. This story involves implementing the variable initialization functionality that ensures all totalization variables used throughout the system are set to zero before any processing begins. The implementation must identify all variables that require initialization, establish a systematic approach to variable management, and ensure that the initialization process is complete and reliable. The system should maintain a registry of all totalization variables, provide verification that initialization has completed successfully, and establish proper variable scoping and lifecycle management. This foundational capability is essential for ensuring data accuracy and preventing calculation errors that could result from uninitialized or residual variable values from previous processing sessions.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "2",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-All totalization variables are identified and documented\n-System initializes all totalization variables to zero before processing begins\n-Variable initialization process is logged and verifiable\n-System provides confirmation that initialization completed successfully\n-Proper variable scoping and lifecycle management is implemented\n-No residual values remain from previous processing sessions\n-Variable initialization is atomic and cannot be partially completed",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49744936ae2dac1ee6a14": {
            "id": "68a49744936ae2dac1ee6a14",
            "idProjects": "68a49744936ae2dac1ee6a14",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49744936ae2dac1ee6a0f",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-24-08.950__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "SAP Account Configuration and Integration Management",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a financial system integrator, I want the system to properly configure accounting accounts for different SAP operation types, so that financial transactions are correctly categorized and processed according to established accounting rules. This story involves implementing the SAP account configuration functionality that processes specific SAP codes (3412, 3413, 4412) and establishes the corresponding debit and credit accounts for each operation type. The implementation must define the WS06CONVCOMPLEMENTO variable for each SAP code, call the R069ACESSACONTA routine to retrieve the appropriate debit and credit accounts, and store these accounts in the corresponding WSCTDEBITO and WSCTCREDITO variables. The system should handle account retrieval errors, validate account information, ensure proper mapping between SAP codes and account types, and maintain data consistency throughout the configuration process. After successful configuration, the system must execute a COMMIT operation to confirm the transaction and ensure data persistence. This functionality is critical for maintaining proper financial controls and ensuring accurate accounting integration with SAP systems.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "13",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-System processes all three SAP codes: 3412, 3413, and 4412\n-WS06CONVCOMPLEMENTO variable is properly defined for each SAP code\n-R069ACESSACONTA routine is successfully called for each code\n-Debit and credit accounts are retrieved and validated for each operation type\n-Account information is stored in correct WSCTDEBITO and WSCTCREDITO variables\n-System handles errors in account retrieval gracefully\n-Account mapping between SAP codes and account types is verified\n-COMMIT operation is executed successfully to confirm the transaction\n-All account configurations are logged for audit purposes",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Processamento Principal de Transacoes Suspensas": {
        "jobId": "2025-08-19__20-49-56.076__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__20-49-56.076__Agile/results/Processamento Principal de Transacoes Suspensas",
        "processDefinition": [
          {
            "idProjects": "68a4e3882479b3f77c3ad559",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Transaction Fetch and Loop Termination Logic",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a4e3882479b3f77c3ad559",
            "idParent": null,
            "useCaseId": "68a4e3882479b3f77c3ad558",
            "externalId": null
          },
          {
            "idProjects": "68a4e3882479b3f77c3ad55a",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Validate Null Fields in Suspended Transactions",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a4e3882479b3f77c3ad55a",
            "idParent": null,
            "useCaseId": "68a4e3882479b3f77c3ad558",
            "externalId": null
          },
          {
            "idProjects": "68a4e3882479b3f77c3ad55b",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Retrieve Descriptions for Transactions and Types",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a4e3882479b3f77c3ad55b",
            "idParent": null,
            "useCaseId": "68a4e3882479b3f77c3ad558",
            "externalId": null
          },
          {
            "idProjects": "68a4e3882479b3f77c3ad55c",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Handle Branch Changes and Print Summaries",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a4e3882479b3f77c3ad55c",
            "idParent": null,
            "useCaseId": "68a4e3882479b3f77c3ad558",
            "externalId": null
          },
          {
            "idProjects": "68a4e3882479b3f77c3ad55d",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Apply Business Logic Based on Dates and Status",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a4e3882479b3f77c3ad55d",
            "idParent": null,
            "useCaseId": "68a4e3882479b3f77c3ad558",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a4e3882479b3f77c3ad559": {
            "id": "68a4e3882479b3f77c3ad559",
            "idProjects": "68a4e3882479b3f77c3ad559",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3882479b3f77c3ad558",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-49-56.076__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Transaction Fetch and Loop Termination Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic to fetch suspended transaction records using the cursor REGISTRO and handle loop termination conditions. This includes: - Executing FETCH on the cursor REGISTRO to retrieve the next record. - Handling SQLCODE 100 to detect end-of-file, close the cursor, set CHAVEFIM to HIGHVALUES, and exit the routine. - Handling SQLCODE errors by displaying an error message and canceling the operation. This ensures the system can process transactions efficiently and handle errors gracefully.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Implement FETCH logic to retrieve records from the cursor REGISTRO.\n- Ensure SQLCODE 100 is handled to close the cursor and terminate the loop.\n- Implement error handling for non-zero SQLCODE values.\n- Verify the logic works correctly with test cases for end-of-file and error scenarios.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3882479b3f77c3ad55a": {
            "id": "68a4e3882479b3f77c3ad55a",
            "idProjects": "68a4e3882479b3f77c3ad55a",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3882479b3f77c3ad558",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-49-56.076__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Validate Null Fields in Suspended Transactions",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic to validate null fields in suspended transactions by invoking the R025VERIFICACAMPOS routine. This includes: - Ensuring the routine is called for each transaction record. - Validating all required fields to ensure data integrity. - Handling any validation errors appropriately. This ensures that the system processes only valid transactions and maintains data quality.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Implement the call to R025VERIFICACAMPOS for each transaction record.\n- Validate all required fields and ensure null values are handled.\n- Verify the validation logic with test cases for various scenarios, including valid and invalid data.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3882479b3f77c3ad55b": {
            "id": "68a4e3882479b3f77c3ad55b",
            "idProjects": "68a4e3882479b3f77c3ad55b",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3882479b3f77c3ad558",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-49-56.076__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Retrieve Descriptions for Transactions and Types",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic to retrieve descriptions for transactions and types by invoking the R094SELECTLANCTOCON and R095ACESSATIPO routines. This includes: - Calling R094SELECTLANCTOCON to obtain transaction descriptions when ATNICODSAP equals 0. - Calling R095ACESSATIPO to obtain type descriptions. - Ensuring the retrieved descriptions are correctly associated with the transaction records. This enhances the readability and usability of transaction data.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "4",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Implement the call to R094SELECTLANCTOCON for transaction descriptions.\n- Implement the call to R095ACESSATIPO for type descriptions.\n- Verify the logic with test cases to ensure descriptions are correctly retrieved and associated with transaction records.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3882479b3f77c3ad55c": {
            "id": "68a4e3882479b3f77c3ad55c",
            "idProjects": "68a4e3882479b3f77c3ad55c",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3882479b3f77c3ad558",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-49-56.076__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Handle Branch Changes and Print Summaries",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic to handle branch changes and print summaries for the previous branch. This includes: - Detecting changes in the branch by comparing WSFILIALANT with the current FKNDFILIAL. - Printing a summary for the previous branch when a change is detected. - Setting CTLIN to 70 to force a new page. - Updating WSFILIALANT with the current branch. This ensures accurate reporting and proper pagination when processing transactions across multiple branches.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "6",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Implement logic to detect branch changes by comparing WSFILIALANT with FKNDFILIAL.\n- Print summaries for the previous branch when a change is detected.\n- Ensure CTLIN is set to 70 to force a new page.\n- Verify the logic with test cases for scenarios involving branch changes and pagination.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3882479b3f77c3ad55d": {
            "id": "68a4e3882479b3f77c3ad55d",
            "idProjects": "68a4e3882479b3f77c3ad55d",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3882479b3f77c3ad558",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-49-56.076__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Apply Business Logic Based on Dates and Status",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic to apply specific business rules based on transaction dates and status. This includes: - Analyzing transaction dates and status to determine the appropriate processing logic. - Implementing the rules as specified in the requirements. - Ensuring the logic is flexible and can accommodate future changes to business rules. This ensures that transactions are processed accurately according to the defined business requirements.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "7",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Implement logic to analyze transaction dates and status.\n- Apply the specified business rules based on the analysis.\n- Verify the logic with test cases for various date and status scenarios.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Classificacao de Transacoes por Data e Status": {
        "jobId": "2025-08-19__20-50-17.978__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__20-50-17.978__Agile/results/Classificacao de Transacoes por Data e Status",
        "processDefinition": [
          {
            "idProjects": "68a4e3a42479b3f77c3ad560",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Pending Transactions Classification Logic",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a4e3a42479b3f77c3ad560",
            "idParent": null,
            "useCaseId": "68a4e3a42479b3f77c3ad55f",
            "externalId": null
          },
          {
            "idProjects": "68a4e3a42479b3f77c3ad561",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Daily Inclusions Classification Logic",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a4e3a42479b3f77c3ad561",
            "idParent": null,
            "useCaseId": "68a4e3a42479b3f77c3ad55f",
            "externalId": null
          },
          {
            "idProjects": "68a4e3a42479b3f77c3ad562",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Same-Day Regularization Logic",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a4e3a42479b3f77c3ad562",
            "idParent": null,
            "useCaseId": "68a4e3a42479b3f77c3ad55f",
            "externalId": null
          },
          {
            "idProjects": "68a4e3a42479b3f77c3ad563",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Previous-Day Regularization Logic",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a4e3a42479b3f77c3ad563",
            "idParent": null,
            "useCaseId": "68a4e3a42479b3f77c3ad55f",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a4e3a42479b3f77c3ad560": {
            "id": "68a4e3a42479b3f77c3ad560",
            "idProjects": "68a4e3a42479b3f77c3ad560",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3a42479b3f77c3ad55f",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-50-17.978__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Pending Transactions Classification Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic for classifying pending transactions so that the system can correctly categorize and calculate totals for transactions marked as pending. \n- The logic should identify transactions where ATDTPROCSUSP is equal to PKDTDTPROC and WSATSFSTATUS equals 1. \n- Define the description as 'PENDENTE'. \n- Increment the WSQTDESALDOATU counter by 1. \n- If FKNICODLANC is between 999 and 2000, add ATNDVALORCR to WSVLRDEBATU; otherwise, add ATNDVALORCR to WSVLRCREDATU. \n- Ensure the routine exits after processing.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system correctly identifies and classifies pending transactions.\n- The WSQTDESALDOATU counter is incremented accurately.\n- The correct totals are calculated and added to either WSVLRDEBATU or WSVLRCREDATU based on the FKNICODLANC range.\n- The routine exits after processing each transaction.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3a42479b3f77c3ad561": {
            "id": "68a4e3a42479b3f77c3ad561",
            "idProjects": "68a4e3a42479b3f77c3ad561",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3a42479b3f77c3ad55f",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-50-17.978__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Daily Inclusions Classification Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic for classifying daily inclusions so that the system can correctly categorize and calculate totals for transactions included on the same day. \n- The logic should identify transactions where ATDTPROCSUSP is equal to PKDTDTPROC and WSATSFSTATUS equals 1. \n- If WSATNISUSPENSOANTNN equals 1, increment WSQTDEINCLU by 1 and define the description as 'INCLUIDO DIA E PENDENTE'. \n- Otherwise, increment WSQTDETRANS by 1 and define the description as 'INCL.TRANSF. PENDENTE'. \n- Call R030IMPRIMEDET to print details. \n- Increment WSQTDESALDOATU by 1. \n- Apply the same debit/credit logic as in the pending transactions classification.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system correctly identifies and classifies daily inclusions.\n- The WSQTDEINCLU and WSQTDETRANS counters are incremented accurately based on the conditions.\n- The correct descriptions are assigned to the transactions.\n- The R030IMPRIMEDET routine is called to print details.\n- The WSQTDESALDOATU counter is incremented accurately.\n- The debit/credit logic is applied correctly.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3a42479b3f77c3ad562": {
            "id": "68a4e3a42479b3f77c3ad562",
            "idProjects": "68a4e3a42479b3f77c3ad562",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3a42479b3f77c3ad55f",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-50-17.978__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Same-Day Regularization Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic for classifying transactions with same-day regularization so that the system can correctly categorize and calculate totals for these transactions. \n- The logic should identify transactions where ATDTPROCSUSP is equal to PKDTDTPROC, ATDTREGULAR is equal to PKDTDTPROC, and WSATSFSTATUS equals 1. \n- Call R037VERIFABSORCAO to verify absorption. \n- If absorption exists, define the description as 'ABSORCAO'; otherwise, use the description from the transaction entry. \n- Define an additional description as 'INCLUIDO DIA'. \n- Print details twice: once for inclusion and once for regularization. \n- Apply calculations based on the final status.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system correctly identifies and classifies transactions with same-day regularization.\n- The R037VERIFABSORCAO routine is called to verify absorption.\n- The correct descriptions are assigned based on the absorption check and transaction entry.\n- Details are printed twice as required.\n- Calculations are applied accurately based on the final status.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3a42479b3f77c3ad563": {
            "id": "68a4e3a42479b3f77c3ad563",
            "idProjects": "68a4e3a42479b3f77c3ad563",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3a42479b3f77c3ad55f",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-50-17.978__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Previous-Day Regularization Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic for classifying transactions with regularization from previous days so that the system can correctly categorize and calculate totals for these transactions. \n- The logic should identify transactions where ATDTREGULAR is not equal to PKDTDTPROC and WSATSFSTATUS equals 1. \n- Call R050VESTATUS to define the status description. \n- Print details for the transaction. \n- Apply calculations based on the final status.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system correctly identifies and classifies transactions with regularization from previous days.\n- The R050VESTATUS routine is called to define the status description.\n- Details are printed accurately for each transaction.\n- Calculations are applied accurately based on the final status.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Calculo de Totalizadores por Status": {
        "jobId": "2025-08-19__20-50-45.245__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__20-50-45.245__Agile/results/Calculo de Totalizadores por Status",
        "processDefinition": [
          {
            "idProjects": "68a4e3b92479b3f77c3ad566",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Determination of Debit and Credit Transactions",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a4e3b92479b3f77c3ad566",
            "idParent": null,
            "useCaseId": "68a4e3b92479b3f77c3ad565",
            "externalId": null
          },
          {
            "idProjects": "68a4e3b92479b3f77c3ad567",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Develop Calculations for Debit Transactions by Status",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a4e3b92479b3f77c3ad567",
            "idParent": null,
            "useCaseId": "68a4e3b92479b3f77c3ad565",
            "externalId": null
          },
          {
            "idProjects": "68a4e3b92479b3f77c3ad568",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Develop Calculations for Credit Transactions by Status",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a4e3b92479b3f77c3ad568",
            "idParent": null,
            "useCaseId": "68a4e3b92479b3f77c3ad565",
            "externalId": null
          },
          {
            "idProjects": "68a4e3b92479b3f77c3ad569",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Calculations for Inclusion Transactions",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a4e3b92479b3f77c3ad569",
            "idParent": null,
            "useCaseId": "68a4e3b92479b3f77c3ad565",
            "externalId": null
          },
          {
            "idProjects": "68a4e3b92479b3f77c3ad56a",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Create Unit Tests for Totalization Logic",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a4e3b92479b3f77c3ad56a",
            "idParent": null,
            "useCaseId": "68a4e3b92479b3f77c3ad565",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a4e3b92479b3f77c3ad566": {
            "id": "68a4e3b92479b3f77c3ad566",
            "idProjects": "68a4e3b92479b3f77c3ad566",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3b92479b3f77c3ad565",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-50-45.245__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Determination of Debit and Credit Transactions",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic for determining whether a transaction is a debit or credit based on the transaction code (FKNICODLANC). This functionality will ensure that transactions are correctly categorized as debit or credit, which is essential for accurate calculations. The logic should check if FKNICODLANC is between 999 and 2000 to classify the transaction as DEBITO; otherwise, classify it as CREDITO. This rule is foundational for subsequent calculations and must be implemented with high accuracy.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "The system must correctly classify transactions as DEBITO or CREDITO based on the provided logic. Unit tests must cover edge cases for transaction codes outside the specified range. The implementation must be modular and reusable for future enhancements.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3b92479b3f77c3ad567": {
            "id": "68a4e3b92479b3f77c3ad567",
            "idProjects": "68a4e3b92479b3f77c3ad567",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3b92479b3f77c3ad565",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-50-45.245__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Develop Calculations for Debit Transactions by Status",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement calculations for debit transactions based on their status. This functionality will ensure that debit transactions are processed correctly for different statuses, including Baixa (Status 2), Reg.Contabil (Status 5), and other statuses. For Baixa, update WSVLRDEBBAIXA and WSQTDEBAIXA. For Reg.Contabil, update WSVLRDEBREGCTB, WSQTDEREGCTB, and WSQTDE1REGCTB. For other statuses, update WSVLRDEBEXCL and WSQTDEEXCL. The implementation must follow the provided algorithm and ensure data integrity.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "The system must correctly calculate debit values and quantities for each status. Unit tests must validate calculations for all statuses. The implementation must be efficient and scalable for large datasets.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3b92479b3f77c3ad568": {
            "id": "68a4e3b92479b3f77c3ad568",
            "idProjects": "68a4e3b92479b3f77c3ad568",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3b92479b3f77c3ad565",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-50-45.245__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Develop Calculations for Credit Transactions by Status",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement calculations for credit transactions based on their status. This functionality will ensure that credit transactions are processed correctly for different statuses, including Baixa (Status 2), Reg.Contabil (Status 5), and other statuses. For Baixa, update WSVLRCREDBAIXA and WSQTDEBAIXA. For Reg.Contabil, update WSVLRCREDREGCTB, WSQTDEREGCTB, and WSQTDE1REGCTB. For other statuses, update WSVLRCREDEXCL and WSQTDEEXCL. The implementation must follow the provided algorithm and ensure data integrity.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "The system must correctly calculate credit values and quantities for each status. Unit tests must validate calculations for all statuses. The implementation must be efficient and scalable for large datasets.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3b92479b3f77c3ad569": {
            "id": "68a4e3b92479b3f77c3ad569",
            "idProjects": "68a4e3b92479b3f77c3ad569",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3b92479b3f77c3ad565",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-50-45.245__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Calculations for Inclusion Transactions",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement calculations for inclusion transactions based on the WSATNISUSPENSOANTNN flag. This functionality will ensure that inclusion transactions are processed correctly for both debit and credit scenarios. If WSATNISUSPENSOANTNN equals 1, update WSVLRDEBINCLU for debit and WSVLRCREDINCLU for credit. Otherwise, update WSVLRDEBTRANS for debit and WSVLRCREDTRANS for credit. The implementation must follow the provided algorithm and ensure data integrity.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "The system must correctly calculate inclusion values for both debit and credit scenarios. Unit tests must validate calculations for all possible flag values. The implementation must be efficient and scalable for large datasets.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3b92479b3f77c3ad56a": {
            "id": "68a4e3b92479b3f77c3ad56a",
            "idProjects": "68a4e3b92479b3f77c3ad56a",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3b92479b3f77c3ad565",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-50-45.245__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Create Unit Tests for Totalization Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to create comprehensive unit tests for the totalization logic implemented in R020PROCESSA. This functionality will ensure that all calculations for debit, credit, and inclusion transactions are accurate and meet the requirements. Unit tests must cover edge cases, including invalid transaction codes, unexpected status values, and incorrect flag values. The tests must validate the integrity of all calculated fields, including WSVLRDEBBAIXA, WSVLRDEBREGCTB, WSVLRDEBEXCL, WSVLRCREDBAIXA, WSVLRCREDREGCTB, WSVLRCREDEXCL, WSVLRDEBINCLU, WSVLRCREDINCLU, WSVLRDEBTRANS, and WSVLRCREDTRANS.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "Unit tests must achieve 100% coverage for the totalization logic. All tests must pass successfully without errors. The tests must be documented and easily maintainable for future updates.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Calculo de Saldos e Totais por Filial": {
        "jobId": "2025-08-19__20-51-07.120__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__20-51-07.120__Agile/results/Calculo de Saldos e Totais por Filial",
        "processDefinition": [
          {
            "idProjects": "68a4e3d12479b3f77c3ad56d",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Calculation of Previous Balances",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a4e3d12479b3f77c3ad56d",
            "idParent": null,
            "useCaseId": "68a4e3d12479b3f77c3ad56c",
            "externalId": null
          },
          {
            "idProjects": "68a4e3d12479b3f77c3ad56e",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Calculation of Current Balances",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a4e3d12479b3f77c3ad56e",
            "idParent": null,
            "useCaseId": "68a4e3d12479b3f77c3ad56c",
            "externalId": null
          },
          {
            "idProjects": "68a4e3d12479b3f77c3ad56f",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Account Balance Calculation",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a4e3d12479b3f77c3ad56f",
            "idParent": null,
            "useCaseId": "68a4e3d12479b3f77c3ad56c",
            "externalId": null
          },
          {
            "idProjects": "68a4e3d12479b3f77c3ad570",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Consolidation of Totals by Branch",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a4e3d12479b3f77c3ad570",
            "idParent": null,
            "useCaseId": "68a4e3d12479b3f77c3ad56c",
            "externalId": null
          },
          {
            "idProjects": "68a4e3d12479b3f77c3ad571",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Reset of Totals for Next Branch",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a4e3d12479b3f77c3ad571",
            "idParent": null,
            "useCaseId": "68a4e3d12479b3f77c3ad56c",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a4e3d12479b3f77c3ad56d": {
            "id": "68a4e3d12479b3f77c3ad56d",
            "idProjects": "68a4e3d12479b3f77c3ad56d",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3d12479b3f77c3ad56c",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-51-07.120__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Calculation of Previous Balances",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "This user story involves implementing the calculation of previous balances for a branch. The calculation includes the following components: WSQTDESALDOANT, WSVLRDEBANT, WSVLRCREDANT, and other related variables. The goal is to ensure accurate computation of previous balances based on the provided algorithm. The implementation should handle all necessary data inputs and outputs, ensuring the results are consistent with the business rules.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system must calculate WSQTDESALDOANT, WSVLRDEBANT, and WSVLRCREDANT accurately.\n- The results must match the expected values based on test cases.\n- The implementation must handle edge cases, such as missing or invalid data inputs.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3d12479b3f77c3ad56e": {
            "id": "68a4e3d12479b3f77c3ad56e",
            "idProjects": "68a4e3d12479b3f77c3ad56e",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3d12479b3f77c3ad56c",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-51-07.120__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Calculation of Current Balances",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "This user story involves implementing the calculation of current balances for a branch. The calculation includes variables such as WSQTDESALDOATU, WSVLRDEBATU, and WSVLRCREDATU. The goal is to ensure accurate computation of current balances based on the provided algorithm. The implementation should integrate seamlessly with the previous balance calculations and ensure data consistency.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system must calculate WSQTDESALDOATU, WSVLRDEBATU, and WSVLRCREDATU accurately.\n- The results must match the expected values based on test cases.\n- The implementation must ensure data consistency with previous balance calculations.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3d12479b3f77c3ad56f": {
            "id": "68a4e3d12479b3f77c3ad56f",
            "idProjects": "68a4e3d12479b3f77c3ad56f",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3d12479b3f77c3ad56c",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-51-07.120__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Account Balance Calculation",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "This user story involves implementing the calculation of account balances for a branch. The calculation includes variables such as WSSALDOCONTA, WSVLRCREDATU, and WSVLRDEBATU. The goal is to ensure accurate computation of account balances based on the provided algorithm. The implementation should ensure that the account balance is derived correctly from the current credit and debit values.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system must calculate WSSALDOCONTA accurately based on WSVLRCREDATU and WSVLRDEBATU.\n- The results must match the expected values based on test cases.\n- The implementation must handle edge cases, such as zero or negative balances.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3d12479b3f77c3ad570": {
            "id": "68a4e3d12479b3f77c3ad570",
            "idProjects": "68a4e3d12479b3f77c3ad570",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3d12479b3f77c3ad56c",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-51-07.120__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Consolidation of Totals by Branch",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "This user story involves implementing the consolidation of totals for a branch. The calculation includes variables such as WSTOTQTDSDANT, WSTOTDEBANT, WSTOTCREDANT, and other related totals. The goal is to ensure accurate accumulation of totals for all relevant categories, including previous balances, current balances, and account balances. The implementation should ensure that the totals are correctly aggregated and stored for reporting purposes.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system must calculate and consolidate totals for all relevant categories accurately.\n- The results must match the expected values based on test cases.\n- The implementation must ensure that the totals are correctly stored and available for reporting.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3d12479b3f77c3ad571": {
            "id": "68a4e3d12479b3f77c3ad571",
            "idProjects": "68a4e3d12479b3f77c3ad571",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3d12479b3f77c3ad56c",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-51-07.120__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Reset of Totals for Next Branch",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "This user story involves implementing the reset of totals for the next branch. The process includes initializing the WSTOTAIS structure with zeros to ensure that the totals from the previous branch do not interfere with the calculations for the next branch. The goal is to ensure data isolation and accuracy in the financial summary generation process.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system must reset the WSTOTAIS structure to zeros before processing the next branch.\n- The implementation must ensure that no residual data from the previous branch affects the calculations for the next branch.\n- The reset process must be efficient and not introduce significant performance overhead.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Geracao de Lancamentos SAP": {
        "jobId": "2025-08-19__15-28-13.811__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__15-28-13.811__Agile/results/Geracao de Lancamentos SAP",
        "processDefinition": [
          {
            "idProjects": "68a49830936ae2dac1ee6a1b",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement SAP Totals Calculation Engine",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a49830936ae2dac1ee6a1b",
            "idParent": null,
            "useCaseId": "68a49830936ae2dac1ee6a1a",
            "externalId": null
          },
          {
            "idProjects": "68a49830936ae2dac1ee6a1c",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Create SAP Entry Generation for Inclusions and Transfers",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a49830936ae2dac1ee6a1c",
            "idParent": null,
            "useCaseId": "68a49830936ae2dac1ee6a1a",
            "externalId": null
          },
          {
            "idProjects": "68a49830936ae2dac1ee6a1d",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Create SAP Entry Generation for Write-offs and Exclusions",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a49830936ae2dac1ee6a1d",
            "idParent": null,
            "useCaseId": "68a49830936ae2dac1ee6a1a",
            "externalId": null
          },
          {
            "idProjects": "68a49830936ae2dac1ee6a1e",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement R067GRAVASAP SAP Record Writing Function",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a49830936ae2dac1ee6a1e",
            "idParent": null,
            "useCaseId": "68a49830936ae2dac1ee6a1a",
            "externalId": null
          },
          {
            "idProjects": "68a49830936ae2dac1ee6a1f",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Create SAP Entry Generation for Accounting Records",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a49830936ae2dac1ee6a1f",
            "idParent": null,
            "useCaseId": "68a49830936ae2dac1ee6a1a",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a49830936ae2dac1ee6a1b": {
            "id": "68a49830936ae2dac1ee6a1b",
            "idProjects": "68a49830936ae2dac1ee6a1b",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49830936ae2dac1ee6a1a",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-28-13.811__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement SAP Totals Calculation Engine",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a financial system user, I want the system to calculate totals for SAP integration so that accounting entries can be properly generated based on different operation types. The system needs to calculate various totals including WSTOTALCREDI (sum of WSTOTCREDINCLU and WSTOTCREDTRANS for inclusions and transfers), WSTOTALCREDB (sum of WSTOTCREDBAIXA and WSTOTCREDEXCL for write-offs and exclusions), and WSTOTCREDREGCTB for accounting records. These calculations serve as the foundation for generating proper debit and credit entries in SAP format. The calculation engine must handle different operation types and ensure accurate totals that will be used by subsequent SAP entry generation processes.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "System calculates WSTOTALCREDI as sum of inclusions and transfers. System calculates WSTOTALCREDB as sum of write-offs and exclusions. System calculates WSTOTCREDREGCTB for accounting records. All calculated totals are available for SAP entry generation. Calculation results are validated and logged for audit purposes.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49830936ae2dac1ee6a1c": {
            "id": "68a49830936ae2dac1ee6a1c",
            "idProjects": "68a49830936ae2dac1ee6a1c",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49830936ae2dac1ee6a1a",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-28-13.811__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Create SAP Entry Generation for Inclusions and Transfers",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a financial system user, I want the system to generate SAP accounting entries for inclusions and transfers so that these operations are properly recorded in the SAP system. When WSTOTALCREDI is greater than 0, the system should create an accounting entry with SAP code 4412, using the configured debit account (WSCTDEBITO4412) and credit account (WSCTCREDITO4412), with the calculated total value (WSTOTALCREDI). The system must call the R067GRAVASAP function to persist the entry data. This functionality ensures that all inclusion and transfer operations are accurately reflected in the SAP accounting system with proper debit and credit balancing.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "System checks if WSTOTALCREDI is greater than 0. System generates SAP entry with code 4412 for inclusions/transfers. System uses correct debit account WSCTDEBITO4412. System uses correct credit account WSCTCREDITO4412. System sets entry value to WSTOTALCREDI. System calls R067GRAVASAP function to save the entry. Entry generation is logged for audit trail.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49830936ae2dac1ee6a1d": {
            "id": "68a49830936ae2dac1ee6a1d",
            "idProjects": "68a49830936ae2dac1ee6a1d",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49830936ae2dac1ee6a1a",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-28-13.811__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Create SAP Entry Generation for Write-offs and Exclusions",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a financial system user, I want the system to generate SAP accounting entries for write-offs and exclusions so that these operations are properly recorded in the SAP system. When WSTOTALCREDB is greater than 0, the system should create an accounting entry with SAP code 3412, using the configured debit account (WSCTDEBITO3412) and credit account (WSCTCREDITO3412), with the calculated total value (WSTOTALCREDB). The system must call the R067GRAVASAP function to persist the entry data. This functionality ensures that all write-off and exclusion operations are accurately reflected in the SAP accounting system with proper debit and credit balancing, maintaining financial integrity.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "System checks if WSTOTALCREDB is greater than 0. System generates SAP entry with code 3412 for write-offs/exclusions. System uses correct debit account WSCTDEBITO3412. System uses correct credit account WSCTCREDITO3412. System sets entry value to WSTOTALCREDB. System calls R067GRAVASAP function to save the entry. Entry generation is logged for audit trail.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49830936ae2dac1ee6a1e": {
            "id": "68a49830936ae2dac1ee6a1e",
            "idProjects": "68a49830936ae2dac1ee6a1e",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49830936ae2dac1ee6a1a",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-28-13.811__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement R067GRAVASAP SAP Record Writing Function",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a financial system user, I want the system to have a robust R067GRAVASAP function that writes accounting records to SAP format so that all generated entries are properly structured and stored. The function must create SAP records with specific structure including WS012CORPORA (E04), processing date components (WS012DIA, WS012MES, WS012ANO), WS012FIL (00), WS012EVENTO (GO002A), complete processing date (WS012DTREF), calculated value (WS012VALOR), and document type (WS012TDOC as GO). For each accounting entry, the function must generate exactly two records: one DEBIT record (WS012DC as D with debit account) and one CREDIT record (WS012DC as C with credit account). The function must handle cost center logic where code 4412 entries have blank cost centers (WS012CL empty), while other codes use WS012CL as L with WS012CENTRO1 as 130 and WS012CENTRO2 as 100.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "13",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "Function creates SAP record structure with all required fields. Function sets WS012CORPORA to E04 and WS012FIL to 00. Function populates date fields from processing date. Function sets WS012EVENTO to GO002A and WS012TDOC to GO. Function generates exactly 2 records per entry (debit and credit). Function handles cost center logic based on SAP code. Function validates all field values before writing. Function provides error handling and logging.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49830936ae2dac1ee6a1f": {
            "id": "68a49830936ae2dac1ee6a1f",
            "idProjects": "68a49830936ae2dac1ee6a1f",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49830936ae2dac1ee6a1a",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-28-13.811__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Create SAP Entry Generation for Accounting Records",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a financial system user, I want the system to generate SAP accounting entries for general accounting records so that all accounting operations are properly integrated with SAP. When WSTOTCREDREGCTB is greater than 0, the system should create an accounting entry with SAP code 3413, using the configured debit account (WSCTDEBITO3413) and credit account (WSCTCREDITO3413), with the calculated total value (WSTOTCREDREGCTB). The system must call the R067GRAVASAP function to persist the entry data. This functionality completes the SAP integration by ensuring that general accounting records are also properly reflected in the SAP system, maintaining comprehensive financial data synchronization across all operation types.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "System checks if WSTOTCREDREGCTB is greater than 0. System generates SAP entry with code 3413 for accounting records. System uses correct debit account WSCTDEBITO3413. System uses correct credit account WSCTCREDITO3413. System sets entry value to WSTOTCREDREGCTB. System calls R067GRAVASAP function to save the entry. Entry generation is logged for audit trail. Integration with SAP is validated and confirmed.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Geracao de Registros Corporate": {
        "jobId": "2025-08-19__20-51-34.538__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__20-51-34.538__Agile/results/Geracao de Registros Corporate",
        "processDefinition": [
          {
            "idProjects": "68a4e3f92479b3f77c3ad574",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Develop Standardized Record Generation for Corporate System",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a4e3f92479b3f77c3ad574",
            "idParent": null,
            "useCaseId": "68a4e3f92479b3f77c3ad573",
            "externalId": null
          },
          {
            "idProjects": "68a4e3f92479b3f77c3ad575",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Business Rules for Transaction Classification",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a4e3f92479b3f77c3ad575",
            "idParent": null,
            "useCaseId": "68a4e3f92479b3f77c3ad573",
            "externalId": null
          },
          {
            "idProjects": "68a4e3f92479b3f77c3ad576",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Develop Integration with SAP for Financial Postings",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a4e3f92479b3f77c3ad576",
            "idParent": null,
            "useCaseId": "68a4e3f92479b3f77c3ad573",
            "externalId": null
          },
          {
            "idProjects": "68a4e3f92479b3f77c3ad577",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Financial Calculations for Account Balances",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a4e3f92479b3f77c3ad577",
            "idParent": null,
            "useCaseId": "68a4e3f92479b3f77c3ad573",
            "externalId": null
          },
          {
            "idProjects": "68a4e3f92479b3f77c3ad578",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Modernize Data Structures for Transaction Processing",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a4e3f92479b3f77c3ad578",
            "idParent": null,
            "useCaseId": "68a4e3f92479b3f77c3ad573",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a4e3f92479b3f77c3ad574": {
            "id": "68a4e3f92479b3f77c3ad574",
            "idProjects": "68a4e3f92479b3f77c3ad574",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3f92479b3f77c3ad573",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-51-34.538__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Develop Standardized Record Generation for Corporate System",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement a functionality to generate standardized records for integration with the Corporate system. This functionality will ensure that detailed transaction data is accurately captured and formatted according to the specified structure. The implementation will include the following:\n- Define and initialize the data structures required for processing suspended transactions, including input, output, and essential working variables.\n- Map all relevant fields such as PKNISUSPENSO (primary key), FKNICONTRATO (foreign key), ATNDVALORCR (transaction value), and others as described in the provided data structure.\n- Implement validation rules for mandatory fields, ensuring that critical fields like transaction status (ATSFSTATUS) and processing date (ATDTPROCSUSP) are always populated.\n- Develop logic to handle null fields by converting them to default values (e.g., zeros or spaces).\n- Ensure compatibility with the Corporate system by adhering to the specified data formats and field sizes.\n- Include error handling for SQL operations and ensure proper logging of any issues encountered during record generation.\n- Test the functionality with various scenarios to validate the accuracy and reliability of the generated records.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system must generate standardized records for all transactions, adhering to the specified data structure.\n- Mandatory fields must be validated and populated correctly.\n- Null fields must be converted to default values as specified.\n- The generated records must be compatible with the Corporate system's integration requirements.\n- Error handling and logging must be implemented for all SQL operations.\n- The functionality must pass all test scenarios, including edge cases.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3f92479b3f77c3ad575": {
            "id": "68a4e3f92479b3f77c3ad575",
            "idProjects": "68a4e3f92479b3f77c3ad575",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3f92479b3f77c3ad573",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-51-34.538__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Business Rules for Transaction Classification",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement business rules for classifying transactions based on their status and date. This will ensure accurate processing and categorization of transactions. The implementation will include the following:\n- Develop logic to classify transactions by their status (e.g., Pending, Settled, Regularized) using the ATSFSTATUS field.\n- Implement rules for determining debit or credit transactions based on the FKNICODLANC field.\n- Ensure that the classification logic adheres to the specified business rules and handles edge cases.\n- Validate the accuracy of the classification by cross-referencing with related tables and fields.\n- Include error handling for scenarios where classification criteria are not met or data is inconsistent.\n- Test the classification logic with a variety of transaction scenarios to ensure reliability and accuracy.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Transactions must be classified accurately based on their status and date.\n- Debit and credit transactions must be determined correctly using the FKNICODLANC field.\n- The classification logic must handle edge cases and inconsistent data gracefully.\n- All classification rules must pass validation tests and meet the specified business requirements.\n- Error handling must be implemented for scenarios where classification criteria are not met.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3f92479b3f77c3ad576": {
            "id": "68a4e3f92479b3f77c3ad576",
            "idProjects": "68a4e3f92479b3f77c3ad576",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3f92479b3f77c3ad573",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-51-34.538__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Develop Integration with SAP for Financial Postings",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to create an integration with the SAP system for financial postings. This will ensure seamless communication and data exchange between the systems. The implementation will include the following:\n- Map the required fields for SAP integration, including WS012CORPORA (corporate code), WS012DATA (posting date), WS012CONTA (account number), WS012DC (debit/credit indicator), and WS012VALOR (posting value).\n- Develop logic to generate SAP-compatible records for financial postings.\n- Implement error handling for scenarios where data does not meet SAP requirements.\n- Ensure that the integration adheres to SAP's data format and validation rules.\n- Test the integration with various financial posting scenarios to validate accuracy and reliability.\n- Include logging and monitoring to track the success and failure of SAP postings.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system must generate SAP-compatible records for all financial postings.\n- All required fields for SAP integration must be mapped and populated correctly.\n- Error handling must be implemented for scenarios where data does not meet SAP requirements.\n- The integration must pass all test scenarios, including edge cases.\n- Logging and monitoring must be implemented to track the success and failure of SAP postings.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3f92479b3f77c3ad577": {
            "id": "68a4e3f92479b3f77c3ad577",
            "idProjects": "68a4e3f92479b3f77c3ad577",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3f92479b3f77c3ad573",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-51-34.538__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Financial Calculations for Account Balances",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement financial calculations for account balances to ensure accurate reporting and processing. This will include the following:\n- Develop formulas to calculate previous and current balances, including inclusions, transfers, settlements, exclusions, and accounting records.\n- Implement logic to calculate the account balance as the difference between current credits and debits.\n- Ensure that all calculations adhere to the specified business rules and handle edge cases.\n- Validate the accuracy of the calculations by cross-referencing with related data.\n- Include error handling for scenarios where data is inconsistent or missing.\n- Test the financial calculations with various scenarios to ensure reliability and accuracy.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Previous and current balances must be calculated accurately based on the specified formulas.\n- The account balance must be calculated as the difference between current credits and debits.\n- All calculations must adhere to the specified business rules and handle edge cases.\n- The accuracy of the calculations must be validated against related data.\n- Error handling must be implemented for scenarios where data is inconsistent or missing.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4e3f92479b3f77c3ad578": {
            "id": "68a4e3f92479b3f77c3ad578",
            "idProjects": "68a4e3f92479b3f77c3ad578",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4e3f92479b3f77c3ad573",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__20-51-34.538__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Modernize Data Structures for Transaction Processing",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to modernize the data structures used for transaction processing to improve performance and maintainability. This will include the following:\n- Redesign the data structures to replace COBOL-based layouts with modern equivalents.\n- Optimize the data structures for better performance and scalability.\n- Ensure compatibility with existing business rules and processing logic.\n- Implement caching mechanisms for frequently accessed data to reduce database load.\n- Validate the new data structures with various transaction scenarios to ensure accuracy and reliability.\n- Include documentation and training materials for the new data structures.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The new data structures must replace COBOL-based layouts with modern equivalents.\n- Performance and scalability must be improved with the redesigned data structures.\n- Compatibility with existing business rules and processing logic must be maintained.\n- Caching mechanisms must be implemented for frequently accessed data.\n- The new data structures must pass validation tests with various transaction scenarios.\n- Documentation and training materials must be provided for the new data structures.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      }
    }
  },
  {
    "fileName": "GO502A38.md",
    "originalPath": "C:\\Users\\artu\\OneDrive - GFT Technologies SE\\Documents\\AI Impact\\codeDocumenterGQ\\generatedDocs\\LegacyTransformer__Business_Rules\\Programas_GO_Tratados\\GO502A38.md",
    "jobId": null,
    "error": null,
    "uri": null,
    "downloaded": true,
    "tokens": 7961,
    "jobIds": {
      "Overview": {
        "jobId": "2025-08-19__15-29-52.091__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__15-29-52.091__Agile/results/Overview",
        "processDefinition": [
          {
            "idProjects": "68a49898936ae2dac1ee6a24",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Suspended Transaction Processing Engine",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a49898936ae2dac1ee6a24",
            "idParent": null,
            "useCaseId": "68a49898936ae2dac1ee6a23",
            "externalId": null
          },
          {
            "idProjects": "68a49898936ae2dac1ee6a25",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Multi-Format Report Generation System",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a49898936ae2dac1ee6a25",
            "idParent": null,
            "useCaseId": "68a49898936ae2dac1ee6a23",
            "externalId": null
          },
          {
            "idProjects": "68a49898936ae2dac1ee6a26",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Branch and Global Totalization Calculator",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a49898936ae2dac1ee6a26",
            "idParent": null,
            "useCaseId": "68a49898936ae2dac1ee6a23",
            "externalId": null
          },
          {
            "idProjects": "68a49898936ae2dac1ee6a27",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Code Legend and Documentation Generator",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a49898936ae2dac1ee6a27",
            "idParent": null,
            "useCaseId": "68a49898936ae2dac1ee6a23",
            "externalId": null
          },
          {
            "idProjects": "68a49898936ae2dac1ee6a28",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Banking Reconciliation Integration Hub",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a49898936ae2dac1ee6a28",
            "idParent": null,
            "useCaseId": "68a49898936ae2dac1ee6a23",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a49898936ae2dac1ee6a24": {
            "id": "68a49898936ae2dac1ee6a24",
            "idProjects": "68a49898936ae2dac1ee6a24",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49898936ae2dac1ee6a23",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-29-52.091__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Suspended Transaction Processing Engine",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a bank operations manager, I want a core processing engine that can retrieve and classify suspended transactions from the current account system so that I can have accurate data for generating comprehensive reports. The system needs to connect to multiple database tables containing transaction data and apply business rules to categorize transactions by status (pending, regularized, settled, transferred) and operation type. The processing engine should handle large volumes of transaction data efficiently and maintain data integrity throughout the classification process. This foundational component will serve as the backbone for all reporting functionalities, ensuring that downstream processes receive properly structured and categorized transaction data.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "13",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-System successfully connects to all required database tables containing transaction data\n-Transactions are accurately classified by status: pending, regularized, settled, and transferred\n-Transactions are properly categorized by operation type according to business rules\n-Processing engine handles concurrent access and maintains data consistency\n-System logs all processing activities for audit purposes\n-Error handling mechanisms are in place for data inconsistencies\n-Performance benchmarks are met for processing large transaction volumes",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49898936ae2dac1ee6a25": {
            "id": "68a49898936ae2dac1ee6a25",
            "idProjects": "68a49898936ae2dac1ee6a25",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49898936ae2dac1ee6a23",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-29-52.091__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Multi-Format Report Generation System",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a financial analyst, I want the system to generate detailed reports in multiple output formats so that I can distribute information to different stakeholders and systems according to their specific requirements. The system must produce printed reports for manual review, generate files compatible with SAP system integration, and create data exports for the Corporate system. Each output format should contain the same core transaction data but be structured according to the receiving system's specifications. The report generation should include proper formatting, headers, footers, and maintain data accuracy across all formats. The system should also handle scheduling and automated distribution of reports to designated recipients.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-System generates printed reports with proper formatting and layout\n-SAP-compatible files are created with correct data structure and format\n-Corporate system data exports meet specified technical requirements\n-All output formats contain consistent and accurate transaction data\n-Report generation can be scheduled and automated\n-System provides confirmation of successful report creation and distribution\n-Error handling for failed report generation attempts\n-Reports include proper timestamps and identification information",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49898936ae2dac1ee6a26": {
            "id": "68a49898936ae2dac1ee6a26",
            "idProjects": "68a49898936ae2dac1ee6a26",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49898936ae2dac1ee6a23",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-29-52.091__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Branch and Global Totalization Calculator",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a financial controller, I want the system to automatically calculate and display totalization values by branch and globally so that I can quickly assess the financial impact and distribution of suspended transactions across the organization. The system should aggregate transaction amounts by branch location, providing subtotals for each branch's suspended transactions categorized by status and operation type. Additionally, it should calculate grand totals across all branches to provide a comprehensive view of the bank's overall suspended transaction position. The calculations must be accurate, real-time, and include validation mechanisms to ensure mathematical correctness. The totalization feature should support drill-down capabilities allowing users to navigate from summary totals to detailed transaction listings.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-System accurately calculates totals by individual branch for all transaction categories\n-Global totals are computed correctly across all branches\n-Totalization includes breakdown by transaction status and operation type\n-Real-time calculation updates when underlying transaction data changes\n-Mathematical validation ensures accuracy of all calculated totals\n-Drill-down functionality allows navigation from totals to detailed transactions\n-System handles currency formatting and decimal precision correctly\n-Totalization performance meets response time requirements for large datasets",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49898936ae2dac1ee6a27": {
            "id": "68a49898936ae2dac1ee6a27",
            "idProjects": "68a49898936ae2dac1ee6a27",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49898936ae2dac1ee6a23",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-29-52.091__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Code Legend and Documentation Generator",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a bank auditor, I want the system to automatically generate comprehensive legends and explanations for all codes used in the reports so that I can understand the meaning of each code without requiring external documentation or system knowledge. The system should maintain a centralized repository of all transaction codes, status codes, operation type codes, and branch codes used throughout the reporting process. The legend generator should produce clear, formatted explanations that can be included in reports or accessed as standalone reference documents. The system should also support multilingual legends if required and maintain version control for code definitions to ensure consistency over time. This feature is crucial for regulatory compliance and audit trail requirements.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-System maintains a complete repository of all codes used in transaction processing\n-Legends are automatically generated with clear, understandable explanations\n-Code explanations are formatted consistently across all reports\n-Legend generation supports multiple output formats (printed, digital, embedded)\n-System tracks changes to code definitions with proper version control\n-Legends can be generated as standalone documents or embedded in reports\n-Code repository supports easy maintenance and updates by authorized users\n-Generated legends meet regulatory compliance and audit requirements",
                "values": null
              }
            ],
            "parent": null
          },
          "68a49898936ae2dac1ee6a28": {
            "id": "68a49898936ae2dac1ee6a28",
            "idProjects": "68a49898936ae2dac1ee6a28",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a49898936ae2dac1ee6a23",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-29-52.091__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Banking Reconciliation Integration Hub",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a bank reconciliation specialist, I want a centralized integration hub that consolidates data from multiple system tables to provide a unified view of all suspended transactions so that I can perform comprehensive reconciliation and audit activities efficiently. The integration hub should connect to various database tables containing transaction data, account information, branch details, and historical records to create a complete picture of each suspended transaction. The system must handle data synchronization, resolve conflicts between different data sources, and maintain referential integrity across all integrated tables. This hub will serve as the single source of truth for reconciliation processes, enabling accurate tracking of transaction lifecycles from suspension through resolution, and supporting both automated reconciliation processes and manual audit procedures.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "13",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-Integration hub successfully connects to all required system tables and data sources\n-Data synchronization maintains consistency across all integrated tables\n-System resolves data conflicts using predefined business rules\n-Referential integrity is maintained across all data relationships\n-Hub provides unified view of transaction data from multiple sources\n-Real-time data updates are reflected across all integrated components\n-System supports both automated reconciliation processes and manual audit procedures\n-Integration hub maintains audit trail of all data access and modifications\n-Performance optimization ensures efficient data retrieval and processing",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Business Rules": {
        "jobId": "2025-08-19__23-51-29.680__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__23-51-29.680__Agile/results/Business Rules",
        "processDefinition": [
          {
            "idProjects": "68a50e182479b3f77c3ad581",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Transaction Selection Logic",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a50e182479b3f77c3ad581",
            "idParent": null,
            "useCaseId": "68a50e182479b3f77c3ad580",
            "externalId": null
          },
          {
            "idProjects": "68a50e182479b3f77c3ad582",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Transaction Status Classification",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a50e182479b3f77c3ad582",
            "idParent": null,
            "useCaseId": "68a50e182479b3f77c3ad580",
            "externalId": null
          },
          {
            "idProjects": "68a50e182479b3f77c3ad583",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Debit and Credit Classification",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a50e182479b3f77c3ad583",
            "idParent": null,
            "useCaseId": "68a50e182479b3f77c3ad580",
            "externalId": null
          },
          {
            "idProjects": "68a50e182479b3f77c3ad584",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement SAP Integration for Accounting Entries",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a50e182479b3f77c3ad584",
            "idParent": null,
            "useCaseId": "68a50e182479b3f77c3ad580",
            "externalId": null
          },
          {
            "idProjects": "68a50e182479b3f77c3ad585",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Branch-Based Report Grouping",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a50e182479b3f77c3ad585",
            "idParent": null,
            "useCaseId": "68a50e182479b3f77c3ad580",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a50e182479b3f77c3ad581": {
            "id": "68a50e182479b3f77c3ad581",
            "idProjects": "68a50e182479b3f77c3ad581",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e182479b3f77c3ad580",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-51-29.680__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Transaction Selection Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic for selecting transactions from the PAKF023VSUSPENSO table so that the system retrieves transactions where the suspension processing date or regularization date matches the current processing date, or where the transaction status is not 1 (pending) or 6 (canceled), and the situation is not 'C' (canceled). This ensures that only relevant transactions are processed.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system retrieves transactions based on the specified conditions.\n- Transactions with status 1 (pending) or 6 (canceled) are excluded.\n- Transactions with situation 'C' (canceled) are excluded.\n- The logic is tested and verified with sample data.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e182479b3f77c3ad582": {
            "id": "68a50e182479b3f77c3ad582",
            "idProjects": "68a50e182479b3f77c3ad582",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e182479b3f77c3ad580",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-51-29.680__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Transaction Status Classification",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to classify transactions based on the ATSFSTATUS field into statuses such as 1 (Pending), 2 (Baixa), 3 (Regularizado), 4 (Residuo), and 5 (Registro Contabil) so that the system can apply specific accounting and totalization rules for each status.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Transactions are classified correctly based on the ATSFSTATUS field.\n- Specific accounting and totalization rules are applied for each status.\n- The classification logic is tested with various scenarios.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e182479b3f77c3ad583": {
            "id": "68a50e182479b3f77c3ad583",
            "idProjects": "68a50e182479b3f77c3ad583",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e182479b3f77c3ad580",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-51-29.680__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Debit and Credit Classification",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to classify transactions as debit or credit based on the FKNICODLANC field so that transactions with codes between 999 and 2000 are classified as debit, and others as credit. This classification will affect totalizers and the accounting accounts used.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Transactions are classified as debit if the FKNICODLANC code is between 999 and 2000.\n- Transactions are classified as credit if the FKNICODLANC code is outside the range of 999 to 2000.\n- The classification impacts totalizers and accounting accounts correctly.\n- The logic is tested with various transaction codes.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e182479b3f77c3ad584": {
            "id": "68a50e182479b3f77c3ad584",
            "idProjects": "68a50e182479b3f77c3ad584",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e182479b3f77c3ad580",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-51-29.680__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement SAP Integration for Accounting Entries",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement SAP integration for generating accounting entries for each transaction type using specific codes (3412 for baixas and exclusions, 3413 for accounting records, and 4412 for inclusions and transfers) so that each entry generates a debit-credit pair with corresponding accounts.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "13",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- SAP integration is implemented for generating accounting entries.\n- Specific codes (3412, 3413, 4412) are used for different transaction types.\n- Each entry generates a debit-credit pair with corresponding accounts.\n- The integration is tested with sample transactions.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e182479b3f77c3ad585": {
            "id": "68a50e182479b3f77c3ad585",
            "idProjects": "68a50e182479b3f77c3ad585",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e182479b3f77c3ad580",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-51-29.680__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Branch-Based Report Grouping",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement branch-based grouping in reports so that subtotals are generated for each branch, and when there is a branch change, the system prints the summary of the previous branch and resets the counters before processing the next branch.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Reports are grouped by branch.\n- Subtotals are generated for each branch.\n- When a branch change occurs, the summary of the previous branch is printed.\n- Counters are reset before processing the next branch.\n- The functionality is tested with multi-branch data.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Dependencies": {
        "jobId": "2025-08-19__23-51-56.984__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__23-51-56.984__Agile/results/Dependencies",
        "processDefinition": [
          {
            "idProjects": "68a50e302479b3f77c3ad588",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Map and migrate PAKF023VSUSPENSO table to new architecture",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a50e302479b3f77c3ad588",
            "idParent": null,
            "useCaseId": "68a50e302479b3f77c3ad587",
            "externalId": null
          },
          {
            "idProjects": "68a50e302479b3f77c3ad589",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Adapt SQLCA for new database system",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a50e302479b3f77c3ad589",
            "idParent": null,
            "useCaseId": "68a50e302479b3f77c3ad587",
            "externalId": null
          },
          {
            "idProjects": "68a50e302479b3f77c3ad58a",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Convert GN111V00 copybook to modern data model",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a50e302479b3f77c3ad58a",
            "idParent": null,
            "useCaseId": "68a50e302479b3f77c3ad587",
            "externalId": null
          },
          {
            "idProjects": "68a50e302479b3f77c3ad58b",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Redesign PAKF018VCONTROLE table for modernized processing logic",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a50e302479b3f77c3ad58b",
            "idParent": null,
            "useCaseId": "68a50e302479b3f77c3ad587",
            "externalId": null
          },
          {
            "idProjects": "68a50e302479b3f77c3ad58c",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Replace YY035A utility program with modern APIs",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a50e302479b3f77c3ad58c",
            "idParent": null,
            "useCaseId": "68a50e302479b3f77c3ad587",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a50e302479b3f77c3ad588": {
            "id": "68a50e302479b3f77c3ad588",
            "idProjects": "68a50e302479b3f77c3ad588",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e302479b3f77c3ad587",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-51-56.984__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Map and migrate PAKF023VSUSPENSO table to new architecture",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to map and migrate the PAKF023VSUSPENSO table, which contains critical data such as contracts, values, dates, and statuses, to the new architecture. This table is central to the system and requires a complete mapping to ensure data integrity and compatibility with the modernized system. The migration process should include: - Analyzing the current structure and dependencies of the table. - Designing a new schema that aligns with the modern architecture. - Implementing data migration scripts to transfer data accurately. - Validating the migrated data to ensure consistency and correctness.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The PAKF023VSUSPENSO table is successfully migrated to the new architecture.\n- All data is accurately transferred and validated.\n- The new schema is compatible with the modernized system.\n- No data loss or corruption occurs during the migration process.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e302479b3f77c3ad589": {
            "id": "68a50e302479b3f77c3ad589",
            "idProjects": "68a50e302479b3f77c3ad589",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e302479b3f77c3ad587",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-51-56.984__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Adapt SQLCA for new database system",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to adapt the SQLCA (SQL Communication Area) component to work with the new database system. This component is critical for controlling transactions and handling errors in the current DB2 environment. The adaptation process should include: - Analyzing the current implementation of SQLCA. - Modifying the SQLCA structure to align with the new database system. - Testing the adapted SQLCA to ensure it handles transactions and errors correctly. - Ensuring compatibility with all dependent modules and programs.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The SQLCA component is successfully adapted for the new database system.\n- Transactions and error handling work correctly in the modernized environment.\n- All dependent modules and programs function without issues.\n- Comprehensive testing confirms the reliability of the adapted SQLCA.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e302479b3f77c3ad58a": {
            "id": "68a50e302479b3f77c3ad58a",
            "idProjects": "68a50e302479b3f77c3ad58a",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e302479b3f77c3ad587",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-51-56.984__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Convert GN111V00 copybook to modern data model",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to convert the GN111V00 copybook, which defines the structure of the PAKG111VLANCTOCON table, to a modern data model. This copybook is critical for financial configuration and integration with SAP. The conversion process should include: - Analyzing the current structure and usage of GN111V00. - Designing a new data model that aligns with the modernized system. - Implementing the new data model in the appropriate programming language or framework. - Testing the new data model to ensure compatibility and correctness.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "6",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The GN111V00 copybook is successfully converted to a modern data model.\n- The new data model is compatible with the modernized system.\n- Financial configurations and SAP integrations work correctly.\n- Comprehensive testing confirms the reliability of the new data model.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e302479b3f77c3ad58b": {
            "id": "68a50e302479b3f77c3ad58b",
            "idProjects": "68a50e302479b3f77c3ad58b",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e302479b3f77c3ad587",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-51-56.984__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Redesign PAKF018VCONTROLE table for modernized processing logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to redesign the PAKF018VCONTROLE table, which controls the processing flow and contains the current processing date, to align with the modernized system. This table is essential for business logic and must be updated to ensure seamless operation. The redesign process should include: - Analyzing the current structure and dependencies of the table. - Designing a new schema that supports modern processing logic. - Implementing the redesigned table in the new database system. - Testing the redesigned table to ensure it functions correctly within the modernized system.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "7",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The PAKF018VCONTROLE table is successfully redesigned and implemented in the new database system.\n- The new schema supports modern processing logic.\n- All dependent modules and programs function correctly.\n- Comprehensive testing confirms the reliability of the redesigned table.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e302479b3f77c3ad58c": {
            "id": "68a50e302479b3f77c3ad58c",
            "idProjects": "68a50e302479b3f77c3ad58c",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e302479b3f77c3ad587",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-51-56.984__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Replace YY035A utility program with modern APIs",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to replace the YY035A utility program, which controls output files, with modern APIs. This program is currently used for system functionality and can be substituted to improve maintainability and scalability. The replacement process should include: - Analyzing the current functionality and usage of YY035A. - Designing modern APIs that replicate and enhance the functionality of YY035A. - Implementing the new APIs in the modernized system. - Testing the new APIs to ensure they meet all functional requirements.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "4",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The YY035A utility program is successfully replaced with modern APIs.\n- The new APIs replicate and enhance the functionality of YY035A.\n- All dependent modules and programs function correctly.\n- Comprehensive testing confirms the reliability and scalability of the new APIs.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Detailed Rules": {
        "Inicializacao do Sistema e Controle de Data de Processamento": {
          "jobId": "2025-08-19__15-32-24.515__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__15-32-24.515__Agile/results/Inicializacao do Sistema e Controle de Data de Processamento",
          "processDefinition": [
            {
              "idProjects": "68a4992a936ae2dac1ee6a2d",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "System Initialization and File Management Setup",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a4992a936ae2dac1ee6a2d",
              "idParent": null,
              "useCaseId": "68a4992a936ae2dac1ee6a2c",
              "externalId": null
            },
            {
              "idProjects": "68a4992a936ae2dac1ee6a2e",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "System Date and Time Management Service",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a4992a936ae2dac1ee6a2e",
              "idParent": null,
              "useCaseId": "68a4992a936ae2dac1ee6a2c",
              "externalId": null
            },
            {
              "idProjects": "68a4992a936ae2dac1ee6a2f",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Processing Date Control and Validation System",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a4992a936ae2dac1ee6a2f",
              "idParent": null,
              "useCaseId": "68a4992a936ae2dac1ee6a2c",
              "externalId": null
            },
            {
              "idProjects": "68a4992a936ae2dac1ee6a30",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Totalization Variables Initialization Module",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a4992a936ae2dac1ee6a30",
              "idParent": null,
              "useCaseId": "68a4992a936ae2dac1ee6a2c",
              "externalId": null
            },
            {
              "idProjects": "68a4992a936ae2dac1ee6a31",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "SAP Account Configuration and Mapping System",
              "order": 5,
              "blocked": false,
              "children": [],
              "id": "68a4992a936ae2dac1ee6a31",
              "idParent": null,
              "useCaseId": "68a4992a936ae2dac1ee6a2c",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a4992a936ae2dac1ee6a2d": {
              "id": "68a4992a936ae2dac1ee6a2d",
              "idProjects": "68a4992a936ae2dac1ee6a2d",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4992a936ae2dac1ee6a2c",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-32-24.515__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "System Initialization and File Management Setup",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a system administrator, I want the system to properly initialize all required output files and establish the processing environment, so that the transaction processing can begin with all necessary resources available. This story involves opening all required output files (AD1GO002, AB1GO002, AB2GO002, AB3GO002) and ensuring they are ready for data processing operations. The system must validate that all files are accessible and properly configured before proceeding with any transaction processing activities. This initialization is critical for the overall system stability and data integrity throughout the processing cycle.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "-System successfully opens all four output files: AD1GO002, AB1GO002, AB2GO002, AB3GO002\n-All files are validated for write access and proper permissions\n-System handles file access errors gracefully with appropriate error messages\n-File handles are properly maintained throughout the session\n-System logs successful file initialization for audit purposes",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4992a936ae2dac1ee6a2e": {
              "id": "68a4992a936ae2dac1ee6a2e",
              "idProjects": "68a4992a936ae2dac1ee6a2e",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4992a936ae2dac1ee6a2c",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-32-24.515__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "System Date and Time Management Service",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a transaction processor, I want the system to obtain and manage current system date and time information, so that all processing activities are properly timestamped and synchronized. This functionality requires calling the YY115A function to retrieve the current system date and time, then extracting individual components including day, month, year, hour, and minute values. The extracted date components will be used throughout the system for various processing operations, report generation, and audit trail purposes. The system must ensure accurate time handling and proper formatting of date components for downstream processes.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "2",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "-System successfully calls YY115A function to retrieve current date and time\n-Date and time components are accurately extracted: day, month, year, hour, minute\n-All extracted components are validated for proper format and range\n-System handles timezone considerations appropriately\n-Date components are made available to other system modules\n-Error handling is implemented for date/time retrieval failures",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4992a936ae2dac1ee6a2f": {
              "id": "68a4992a936ae2dac1ee6a2f",
              "idProjects": "68a4992a936ae2dac1ee6a2f",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4992a936ae2dac1ee6a2c",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-32-24.515__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Processing Date Control and Validation System",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a transaction controller, I want the system to determine and validate the processing date for suspended transactions, so that transaction processing follows proper business rules and chronological order. This involves executing a SQL query to retrieve the minimum processing date from the control table (AXG1000.PAKF018VCONTROLE) where movement processing is not complete. The system must validate the SQL execution results, handle error conditions appropriately, and ensure that the retrieved processing date is valid and within acceptable business parameters. The processing date will be converted to the appropriate format and used in report titles and processing logic throughout the system.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "-SQL query executes successfully against AXG1000.PAKF018VCONTROLE table\n-System retrieves MINPKDTDTPROC value where ATSFMOVPROC is not equal to N\n-SQLCODE validation ensures successful query execution (SQLCODE = 0)\n-Retrieved date value validation ensures it is not negative or invalid\n-Error handling displays appropriate messages and cancels processing when validation fails\n-Processing date is converted to day-month-year format for report titles\n-System maintains audit trail of processing date determination",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4992a936ae2dac1ee6a30": {
              "id": "68a4992a936ae2dac1ee6a30",
              "idProjects": "68a4992a936ae2dac1ee6a30",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4992a936ae2dac1ee6a2c",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-32-24.515__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Totalization Variables Initialization Module",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a financial processor, I want all totalization variables to be properly initialized to zero at system startup, so that accurate financial calculations and reporting can be performed without carrying over previous session data. This initialization process ensures that all accumulator variables, counters, and summary fields start from a clean state for each processing session. The system must identify all totalization variables used throughout the processing cycle and systematically reset them to zero values. This is critical for maintaining data integrity and ensuring that financial reports and calculations reflect only the current processing session data.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "2",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "-All totalization variables are identified and documented\n-System initializes all totalization variables to zero at startup\n-Variable initialization is logged for audit purposes\n-System validates successful initialization of all variables\n-No residual data from previous sessions affects current processing\n-Initialization process is atomic and cannot be partially completed",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a4992a936ae2dac1ee6a31": {
              "id": "68a4992a936ae2dac1ee6a31",
              "idProjects": "68a4992a936ae2dac1ee6a31",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a4992a936ae2dac1ee6a2c",
              "order": 5,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__15-32-24.515__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "SAP Account Configuration and Mapping System",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As an accounting system integrator, I want the system to configure and map SAP account codes to their corresponding debit and credit accounts, so that financial transactions are properly categorized and processed according to accounting standards. This functionality processes specific SAP codes (3412, 3413, 4412) by setting up complement conversion codes and calling the R069ACESSACONTA routine to retrieve the appropriate debit and credit account mappings. The system must store these account mappings in corresponding variables (WSCTDEBITO and WSCTCREDITO) for each SAP code, ensuring that all financial operations reference the correct accounting structure. The process concludes with a COMMIT operation to confirm all configuration changes and account mappings are permanently stored.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "-System processes all three SAP codes: 3412, 3413, and 4412\n-WS06CONVCOMPLEMENTO is properly set for each SAP code\n-R069ACESSACONTA routine is successfully called for each code\n-Debit and credit accounts are retrieved and validated for each SAP code\n-Account mappings are stored in WSCTDEBITO and WSCTCREDITO variables\n-COMMIT operation successfully confirms all configuration changes\n-System handles errors in account retrieval gracefully\n-Account mappings are available for subsequent transaction processing",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        },
        "Processamento Principal de Transacoes Suspensas": {
          "jobId": "2025-08-19__23-52-18.866__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__23-52-18.866__Agile/results/Processamento Principal de Transacoes Suspensas",
          "processDefinition": [
            {
              "idProjects": "68a50e432479b3f77c3ad58f",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Transaction Fetch and Loop Termination Logic",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a50e432479b3f77c3ad58f",
              "idParent": null,
              "useCaseId": "68a50e432479b3f77c3ad58e",
              "externalId": null
            },
            {
              "idProjects": "68a50e432479b3f77c3ad590",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Skip Transactions with Specific ATNICODSAP Value",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a50e432479b3f77c3ad590",
              "idParent": null,
              "useCaseId": "68a50e432479b3f77c3ad58e",
              "externalId": null
            },
            {
              "idProjects": "68a50e432479b3f77c3ad591",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Validate Null Fields in Transactions",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a50e432479b3f77c3ad591",
              "idParent": null,
              "useCaseId": "68a50e432479b3f77c3ad58e",
              "externalId": null
            },
            {
              "idProjects": "68a50e432479b3f77c3ad592",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Retrieve Descriptions for Transactions",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a50e432479b3f77c3ad592",
              "idParent": null,
              "useCaseId": "68a50e432479b3f77c3ad58e",
              "externalId": null
            },
            {
              "idProjects": "68a50e432479b3f77c3ad593",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Handle Branch Changes and Generate Summaries",
              "order": 5,
              "blocked": false,
              "children": [],
              "id": "68a50e432479b3f77c3ad593",
              "idParent": null,
              "useCaseId": "68a50e432479b3f77c3ad58e",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a50e432479b3f77c3ad58f": {
              "id": "68a50e432479b3f77c3ad58f",
              "idProjects": "68a50e432479b3f77c3ad58f",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e432479b3f77c3ad58e",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-52-18.866__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Transaction Fetch and Loop Termination Logic",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "- Develop functionality to execute a FETCH operation on the cursor REGISTRO to retrieve the next transaction record.\n- Implement logic to handle SQLCODE 100 (end of file) by closing the cursor, setting CHAVEFIM to HIGHVALUES, and exiting the main loop.\n- Ensure proper error handling for SQLCODE values other than zero, displaying an error message and canceling the operation.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system must successfully fetch the next transaction record using the cursor REGISTRO.\n- When SQLCODE equals 100, the cursor must be closed, CHAVEFIM set to HIGHVALUES, and the loop terminated.\n- For SQLCODE values other than zero, an error message must be displayed, and the operation canceled.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e432479b3f77c3ad590": {
              "id": "68a50e432479b3f77c3ad590",
              "idProjects": "68a50e432479b3f77c3ad590",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e432479b3f77c3ad58e",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-52-18.866__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Skip Transactions with Specific ATNICODSAP Value",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "- Implement logic to check if the ATNICODSAP value equals 4400 and skip processing for such transactions.\n- Ensure the system moves to the end of the routine for these records without further processing.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Transactions with ATNICODSAP value of 4400 must be skipped.\n- The system must move to the end of the routine for these records without executing any additional logic.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e432479b3f77c3ad591": {
              "id": "68a50e432479b3f77c3ad591",
              "idProjects": "68a50e432479b3f77c3ad591",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e432479b3f77c3ad58e",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-52-18.866__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Validate Null Fields in Transactions",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "- Integrate the R025VERIFICACAMPOS routine to validate null fields in each transaction record.\n- Ensure proper handling and reporting of any validation issues encountered during the process.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "4",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system must call the R025VERIFICACAMPOS routine for each transaction record.\n- Null fields must be validated, and any issues must be properly handled and reported.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e432479b3f77c3ad592": {
              "id": "68a50e432479b3f77c3ad592",
              "idProjects": "68a50e432479b3f77c3ad592",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e432479b3f77c3ad58e",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-52-18.866__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Retrieve Descriptions for Transactions",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "- Implement logic to call R094SELECTLANCTOCON for transactions with ATNICODSAP value of 0 to retrieve descriptions.\n- Integrate the R095ACESSATIPO routine to obtain type descriptions for all transactions.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system must call R094SELECTLANCTOCON for transactions with ATNICODSAP value of 0 and retrieve the correct descriptions.\n- The system must call R095ACESSATIPO for all transactions and retrieve the correct type descriptions.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e432479b3f77c3ad593": {
              "id": "68a50e432479b3f77c3ad593",
              "idProjects": "68a50e432479b3f77c3ad593",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e432479b3f77c3ad58e",
              "order": 5,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-52-18.866__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Handle Branch Changes and Generate Summaries",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "- Implement logic to detect changes in branch (filial) by comparing WSFILIALANT with the current FKNDFILIAL.\n- Generate a summary for the previous branch when a change is detected.\n- Force a new page by setting CTLIN to 70 and update WSFILIALANT with the current branch.\n- Apply processing logic based on dates and status as per specific rules.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system must detect branch changes by comparing WSFILIALANT with the current FKNDFILIAL.\n- A summary for the previous branch must be generated when a change is detected.\n- A new page must be forced by setting CTLIN to 70, and WSFILIALANT must be updated with the current branch.\n- Processing logic based on dates and status must be applied as per specific rules.",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        },
        "Classificacao de Transacoes por Data e Status": {
          "jobId": "2025-08-19__23-52-40.789__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__23-52-40.789__Agile/results/Classificacao de Transacoes por Data e Status",
          "processDefinition": [
            {
              "idProjects": "68a50e602479b3f77c3ad596",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Pending Transactions Classification Logic",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a50e602479b3f77c3ad596",
              "idParent": null,
              "useCaseId": "68a50e602479b3f77c3ad595",
              "externalId": null
            },
            {
              "idProjects": "68a50e602479b3f77c3ad597",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Daily Inclusions Classification Logic",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a50e602479b3f77c3ad597",
              "idParent": null,
              "useCaseId": "68a50e602479b3f77c3ad595",
              "externalId": null
            },
            {
              "idProjects": "68a50e602479b3f77c3ad598",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Same-Day Regularization Logic",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a50e602479b3f77c3ad598",
              "idParent": null,
              "useCaseId": "68a50e602479b3f77c3ad595",
              "externalId": null
            },
            {
              "idProjects": "68a50e602479b3f77c3ad599",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Previous-Day Regularization Logic",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a50e602479b3f77c3ad599",
              "idParent": null,
              "useCaseId": "68a50e602479b3f77c3ad595",
              "externalId": null
            },
            {
              "idProjects": "68a50e602479b3f77c3ad59a",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Transaction Classification Framework",
              "order": 5,
              "blocked": false,
              "children": [],
              "id": "68a50e602479b3f77c3ad59a",
              "idParent": null,
              "useCaseId": "68a50e602479b3f77c3ad595",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a50e602479b3f77c3ad596": {
              "id": "68a50e602479b3f77c3ad596",
              "idProjects": "68a50e602479b3f77c3ad596",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e602479b3f77c3ad595",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-52-40.789__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Pending Transactions Classification Logic",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic for classifying pending transactions based on processing date and status so that the system can correctly categorize and calculate totals for these transactions. This includes:\n- Defining the description as 'PENDENTE'.\n- Incrementing the WSQTDESALDOATU counter by 1.\n- Checking if FKNICODLANC is between 999 and 2000 to determine whether to add ATNDVALORCR to WSVLRDEBATU or WSVLRCREDATU.\n- Ensuring the routine exits after processing.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system correctly identifies pending transactions based on the provided criteria.\n- The WSQTDESALDOATU counter is incremented accurately.\n- The correct totals are calculated and stored in WSVLRDEBATU or WSVLRCREDATU based on the FKNICODLANC value.\n- The routine exits without errors after processing.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e602479b3f77c3ad597": {
              "id": "68a50e602479b3f77c3ad597",
              "idProjects": "68a50e602479b3f77c3ad597",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e602479b3f77c3ad595",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-52-40.789__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Daily Inclusions Classification Logic",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic for classifying daily inclusions based on processing date and status so that the system can correctly categorize and calculate totals for these transactions. This includes:\n- Checking if WSATNISUSPENSOANTNN equals 1 to determine whether to increment WSQTDEINCLU and define the description as 'INCLUIDO DIA E PENDENTE'.\n- Otherwise, increment WSQTDETRANS and define the description as 'INCL.TRANSF. PENDENTE'.\n- Calling R030IMPRIMEDET to print details.\n- Incrementing WSQTDESALDOATU.\n- Applying the same debit/credit logic as in the pending transactions classification.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system correctly identifies daily inclusions based on the provided criteria.\n- WSQTDEINCLU or WSQTDETRANS counters are incremented accurately.\n- The correct descriptions are assigned based on the conditions.\n- R030IMPRIMEDET is called to print details.\n- WSQTDESALDOATU is incremented accurately.\n- Debit/credit calculations are applied correctly.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e602479b3f77c3ad598": {
              "id": "68a50e602479b3f77c3ad598",
              "idProjects": "68a50e602479b3f77c3ad598",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e602479b3f77c3ad595",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-52-40.789__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Same-Day Regularization Logic",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic for classifying transactions with same-day regularization based on processing date and status so that the system can correctly categorize and calculate totals for these transactions. This includes:\n- Checking if ATDTPROCSUSP equals PKDTDTPROC and ATDTREGULAR equals PKDTDTPROC and WSATSFSTATUS equals 1.\n- Calling R037VERIFABSORCAO to verify absorption.\n- Defining the description as 'ABSORCAO' if absorption exists, otherwise using the transaction description.\n- Defining an additional description as 'INCLUIDO DIA'.\n- Printing details twice for inclusion and regularization.\n- Applying calculations based on the final status.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system correctly identifies transactions with same-day regularization based on the provided criteria.\n- Absorption is verified using R037VERIFABSORCAO.\n- The correct descriptions are assigned based on the conditions.\n- Details are printed twice for inclusion and regularization.\n- Calculations are applied correctly based on the final status.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e602479b3f77c3ad599": {
              "id": "68a50e602479b3f77c3ad599",
              "idProjects": "68a50e602479b3f77c3ad599",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e602479b3f77c3ad595",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-52-40.789__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Previous-Day Regularization Logic",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic for classifying transactions with regularization from previous days based on processing date and status so that the system can correctly categorize and calculate totals for these transactions. This includes:\n- Checking if ATDTREGULAR is less than PKDTDTPROC and WSATSFSTATUS equals 1.\n- Calling R050VESTATUS to define the status description.\n- Printing details for the transaction.\n- Applying calculations based on the final status.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system correctly identifies transactions with regularization from previous days based on the provided criteria.\n- The status description is defined using R050VESTATUS.\n- Details are printed accurately for the transaction.\n- Calculations are applied correctly based on the final status.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e602479b3f77c3ad59a": {
              "id": "68a50e602479b3f77c3ad59a",
              "idProjects": "68a50e602479b3f77c3ad59a",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e602479b3f77c3ad595",
              "order": 5,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-52-40.789__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Transaction Classification Framework",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to create a framework for classifying transactions based on processing date and status so that the system can handle various transaction types efficiently. This includes:\n- Designing a modular structure to accommodate the classification logic for pending transactions, daily inclusions, same-day regularizations, and previous-day regularizations.\n- Ensuring the framework supports extensibility for future transaction types.\n- Implementing shared utilities for common operations such as printing details and applying debit/credit calculations.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "13",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The framework is modular and supports the classification logic for all specified transaction types.\n- The framework is extensible for future transaction types.\n- Shared utilities are implemented and reusable across different classification routines.",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        },
        "Calculo de Totalizadores por Status": {
          "jobId": "2025-08-19__23-53-08.097__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__23-53-08.097__Agile/results/Calculo de Totalizadores por Status",
          "processDefinition": [
            {
              "idProjects": "68a50e7a2479b3f77c3ad59d",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Determination of Debit and Credit Transactions",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a50e7a2479b3f77c3ad59d",
              "idParent": null,
              "useCaseId": "68a50e7a2479b3f77c3ad59c",
              "externalId": null
            },
            {
              "idProjects": "68a50e7a2479b3f77c3ad59e",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Develop Calculations for Debit Transactions by Status",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a50e7a2479b3f77c3ad59e",
              "idParent": null,
              "useCaseId": "68a50e7a2479b3f77c3ad59c",
              "externalId": null
            },
            {
              "idProjects": "68a50e7a2479b3f77c3ad59f",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Develop Calculations for Credit Transactions by Status",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a50e7a2479b3f77c3ad59f",
              "idParent": null,
              "useCaseId": "68a50e7a2479b3f77c3ad59c",
              "externalId": null
            },
            {
              "idProjects": "68a50e7a2479b3f77c3ad5a0",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Calculations for Inclusion Transactions",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a50e7a2479b3f77c3ad5a0",
              "idParent": null,
              "useCaseId": "68a50e7a2479b3f77c3ad59c",
              "externalId": null
            },
            {
              "idProjects": "68a50e7a2479b3f77c3ad5a1",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Create Unit Tests for All Transaction Calculations",
              "order": 5,
              "blocked": false,
              "children": [],
              "id": "68a50e7a2479b3f77c3ad5a1",
              "idParent": null,
              "useCaseId": "68a50e7a2479b3f77c3ad59c",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a50e7a2479b3f77c3ad59d": {
              "id": "68a50e7a2479b3f77c3ad59d",
              "idProjects": "68a50e7a2479b3f77c3ad59d",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e7a2479b3f77c3ad59c",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-53-08.097__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Determination of Debit and Credit Transactions",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the logic for determining whether a transaction is a debit or credit based on the transaction code (FKNICODLANC). This functionality will ensure that transactions are categorized correctly according to the rules provided. The logic should check if FKNICODLANC is between 999 and 2000 to classify the transaction as DEBITO; otherwise, classify it as CREDITO. This categorization is critical for subsequent calculations and reporting.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "The system correctly identifies transactions as DEBITO when FKNICODLANC is between 999 and 2000. The system correctly identifies transactions as CREDITO for all other cases. Unit tests are implemented to validate the logic for various edge cases and inputs.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e7a2479b3f77c3ad59e": {
              "id": "68a50e7a2479b3f77c3ad59e",
              "idProjects": "68a50e7a2479b3f77c3ad59e",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e7a2479b3f77c3ad59c",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-53-08.097__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Develop Calculations for Debit Transactions by Status",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement calculations for debit transactions based on their status. This functionality will ensure that debit transactions are processed correctly according to the rules provided. For Status 2 (Baixa), calculate WSVLRDEBBAIXA = ATNDVALORCR and increment WSQTDEBAIXA by 1. For Status 5 (Reg.Contabil), calculate WSVLRDEBREGCTB = ATNDVALORCR, increment WSQTDEREGCTB and WSQTDE1REGCTB by 1. For other statuses, calculate WSVLRDEBEXCL = ATNDVALORCR and increment WSQTDEEXCL by 1.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "The system correctly calculates WSVLRDEBBAIXA, WSVLRDEBREGCTB, and WSVLRDEBEXCL based on the transaction status. The system correctly increments WSQTDEBAIXA, WSQTDEREGCTB, WSQTDE1REGCTB, and WSQTDEEXCL as per the rules. Unit tests are implemented to validate the calculations for various statuses and edge cases.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e7a2479b3f77c3ad59f": {
              "id": "68a50e7a2479b3f77c3ad59f",
              "idProjects": "68a50e7a2479b3f77c3ad59f",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e7a2479b3f77c3ad59c",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-53-08.097__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Develop Calculations for Credit Transactions by Status",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement calculations for credit transactions based on their status. This functionality will ensure that credit transactions are processed correctly according to the rules provided. For Status 2 (Baixa), calculate WSVLRCREDBAIXA = ATNDVALORCR and increment WSQTDEBAIXA by 1. For Status 5 (Reg.Contabil), calculate WSVLRCREDREGCTB = ATNDVALORCR, increment WSQTDEREGCTB and WSQTDE1REGCTB by 1. For other statuses, calculate WSVLRCREDEXCL = ATNDVALORCR and increment WSQTDEEXCL by 1.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "The system correctly calculates WSVLRCREDBAIXA, WSVLRCREDREGCTB, and WSVLRCREDEXCL based on the transaction status. The system correctly increments WSQTDEBAIXA, WSQTDEREGCTB, WSQTDE1REGCTB, and WSQTDEEXCL as per the rules. Unit tests are implemented to validate the calculations for various statuses and edge cases.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e7a2479b3f77c3ad5a0": {
              "id": "68a50e7a2479b3f77c3ad5a0",
              "idProjects": "68a50e7a2479b3f77c3ad5a0",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e7a2479b3f77c3ad59c",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-53-08.097__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Calculations for Inclusion Transactions",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement calculations for inclusion transactions based on the WSATNISUSPENSOANTNN flag. This functionality will ensure that inclusion transactions are processed correctly according to the rules provided. If WSATNISUSPENSOANTNN equals 1, calculate WSVLRDEBINCLU = ATNDVALORCR for DEBITO and WSVLRCREDINCLU = ATNDVALORCR for CREDITO. Otherwise, calculate WSVLRDEBTRANS = ATNDVALORCR for DEBITO and WSVLRCREDTRANS = ATNDVALORCR for CREDITO.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "The system correctly calculates WSVLRDEBINCLU and WSVLRCREDINCLU when WSATNISUSPENSOANTNN equals 1. The system correctly calculates WSVLRDEBTRANS and WSVLRCREDTRANS when WSATNISUSPENSOANTNN does not equal 1. Unit tests are implemented to validate the calculations for various edge cases and inputs.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e7a2479b3f77c3ad5a1": {
              "id": "68a50e7a2479b3f77c3ad5a1",
              "idProjects": "68a50e7a2479b3f77c3ad5a1",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e7a2479b3f77c3ad59c",
              "order": 5,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-53-08.097__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Create Unit Tests for All Transaction Calculations",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to create comprehensive unit tests for all transaction calculation rules. This functionality will ensure that the implemented logic for debit, credit, and inclusion transactions is robust and error-free. Unit tests should cover edge cases, invalid inputs, and all possible statuses and flags. The tests should validate the correctness of calculations for WSVLRDEBBAIXA, WSVLRDEBREGCTB, WSVLRDEBEXCL, WSVLRCREDBAIXA, WSVLRCREDREGCTB, WSVLRCREDEXCL, WSVLRDEBINCLU, WSVLRCREDINCLU, WSVLRDEBTRANS, and WSVLRCREDTRANS.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "Unit tests are implemented for all calculation rules. Tests cover edge cases, invalid inputs, and all possible statuses and flags. All tests pass successfully, ensuring the correctness of the implemented logic.",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        },
        "Calculo de Saldos e Totais por Filial": {
          "jobId": "2025-08-19__23-53-35.404__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__23-53-35.404__Agile/results/Calculo de Saldos e Totais por Filial",
          "processDefinition": [
            {
              "idProjects": "68a50e972479b3f77c3ad5a4",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Calculation of Previous and Current Balances",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a50e972479b3f77c3ad5a4",
              "idParent": null,
              "useCaseId": "68a50e972479b3f77c3ad5a3",
              "externalId": null
            },
            {
              "idProjects": "68a50e972479b3f77c3ad5a5",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Account Balance Calculation",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a50e972479b3f77c3ad5a5",
              "idParent": null,
              "useCaseId": "68a50e972479b3f77c3ad5a3",
              "externalId": null
            },
            {
              "idProjects": "68a50e972479b3f77c3ad5a6",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Accumulation of General Totals",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a50e972479b3f77c3ad5a6",
              "idParent": null,
              "useCaseId": "68a50e972479b3f77c3ad5a3",
              "externalId": null
            },
            {
              "idProjects": "68a50e972479b3f77c3ad5a7",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Reset of Branch Totals",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a50e972479b3f77c3ad5a7",
              "idParent": null,
              "useCaseId": "68a50e972479b3f77c3ad5a3",
              "externalId": null
            },
            {
              "idProjects": "68a50e972479b3f77c3ad5a8",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Generate Complete Financial Summary for Branch",
              "order": 5,
              "blocked": false,
              "children": [],
              "id": "68a50e972479b3f77c3ad5a8",
              "idParent": null,
              "useCaseId": "68a50e972479b3f77c3ad5a3",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a50e972479b3f77c3ad5a4": {
              "id": "68a50e972479b3f77c3ad5a4",
              "idProjects": "68a50e972479b3f77c3ad5a4",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e972479b3f77c3ad5a3",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-53-35.404__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Calculation of Previous and Current Balances",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the calculation of previous and current balances for each branch so that the financial summary includes accurate historical and current data. This involves calculating the following fields: WSQTDESALDOANT, WSQTDESALDOATU, WSQTDEINCLU, WSQTDETRANS, WSQTDEBAIXA, WSQTDEEXCL, WSQTDEREGCTB, WSVLRDEBANT, WSVLRDEBATU, WSVLRDEBINCLU, WSVLRDEBTRANS, WSVLRDEBBAIXA, WSVLRDEBEXCL, WSVLRDEBREGCTB, WSVLRCREDANT, WSVLRCREDATU, WSVLRCREDINCLU, WSVLRCREDTRANS, WSVLRCREDBAIXA, WSVLRCREDEXCL, WSVLRCREDREGCTB.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Ensure all fields related to previous and current balances are calculated accurately.\n- Validate the calculations against sample data to ensure correctness.\n- Ensure the implementation is modular and reusable.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e972479b3f77c3ad5a5": {
              "id": "68a50e972479b3f77c3ad5a5",
              "idProjects": "68a50e972479b3f77c3ad5a5",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e972479b3f77c3ad5a3",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-53-35.404__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Account Balance Calculation",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the calculation of the account balance for each branch so that the financial summary includes the net balance. This involves calculating the WSSALDOCONTA field using the formula: WSSALDOCONTA = WSVLRCREDATU - WSVLRDEBATU.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Ensure the WSSALDOCONTA field is calculated accurately.\n- Validate the calculation against sample data to ensure correctness.\n- Ensure the implementation is modular and reusable.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e972479b3f77c3ad5a6": {
              "id": "68a50e972479b3f77c3ad5a6",
              "idProjects": "68a50e972479b3f77c3ad5a6",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e972479b3f77c3ad5a3",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-53-35.404__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Accumulation of General Totals",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the accumulation of general totals for each branch so that the financial summary includes consolidated data. This involves calculating and accumulating the following fields: WSTOTQTDSDANT, WSTOTDEBANT, WSTOTCREDANT, WSTOTQTDINCLU, WSTOTDEBINCLU, WSTOTCREDINCLU, WSTOTQTDTRANS, WSTOTDEBTRANS, WSTOTCREDTRANS, WSTOTQTDBAIXA, WSTOTDEBBAIXA, WSTOTCREDBAIXA, WSTOTQTDEXCL, WSTOTDEBEXCL, WSTOTCREDEXCL, WSTOTQTDREGCTB, WSTOTDEBREGCTB, WSTOTCREDREGCTB, WSTOTQTDSDATU, WSTOTDEBATU, WSTOTCREDATU, WSTOTSALDOCONTA.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Ensure all fields related to general totals are calculated and accumulated accurately.\n- Validate the accumulation against sample data to ensure correctness.\n- Ensure the implementation is modular and reusable.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e972479b3f77c3ad5a7": {
              "id": "68a50e972479b3f77c3ad5a7",
              "idProjects": "68a50e972479b3f77c3ad5a7",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e972479b3f77c3ad5a3",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-53-35.404__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Reset of Branch Totals",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement the reset of branch totals so that the financial summary can start fresh for the next branch. This involves initializing the WSTOTAIS structure with zeros.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Ensure the WSTOTAIS structure is reset to zeros accurately.\n- Validate the reset functionality against sample data to ensure correctness.\n- Ensure the implementation is modular and reusable.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50e972479b3f77c3ad5a8": {
              "id": "68a50e972479b3f77c3ad5a8",
              "idProjects": "68a50e972479b3f77c3ad5a8",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50e972479b3f77c3ad5a3",
              "order": 5,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-53-35.404__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Generate Complete Financial Summary for Branch",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to generate a complete financial summary for each branch so that the system provides a consolidated view of all balances and totals. This involves integrating the calculations for previous balances, current balances, account balances, general totals, and resetting branch totals.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "13",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Ensure the financial summary includes all calculated fields for previous balances, current balances, account balances, and general totals.\n- Validate the generated summary against sample data to ensure correctness.\n- Ensure the implementation is modular and reusable.",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        },
        "Geracao de Lancamentos SAP": {
          "jobId": "2025-08-19__23-54-02.722__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__23-54-02.722__Agile/results/Geracao de Lancamentos SAP",
          "processDefinition": [
            {
              "idProjects": "68a50ebb2479b3f77c3ad5ab",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Develop Functionality for Calculating Totals for SAP Integration",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a50ebb2479b3f77c3ad5ab",
              "idParent": null,
              "useCaseId": "68a50ebb2479b3f77c3ad5aa",
              "externalId": null
            },
            {
              "idProjects": "68a50ebb2479b3f77c3ad5ac",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement SAP Entry Generation for Inclusions and Transfers",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a50ebb2479b3f77c3ad5ac",
              "idParent": null,
              "useCaseId": "68a50ebb2479b3f77c3ad5aa",
              "externalId": null
            },
            {
              "idProjects": "68a50ebb2479b3f77c3ad5ad",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement SAP Entry Generation for Write-Offs and Exclusions",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a50ebb2479b3f77c3ad5ad",
              "idParent": null,
              "useCaseId": "68a50ebb2479b3f77c3ad5aa",
              "externalId": null
            },
            {
              "idProjects": "68a50ebb2479b3f77c3ad5ae",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement SAP Entry Generation for Accounting Records",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a50ebb2479b3f77c3ad5ae",
              "idParent": null,
              "useCaseId": "68a50ebb2479b3f77c3ad5aa",
              "externalId": null
            },
            {
              "idProjects": "68a50ebb2479b3f77c3ad5af",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Develop SAP Record Structure in R067GRAVASAP",
              "order": 5,
              "blocked": false,
              "children": [],
              "id": "68a50ebb2479b3f77c3ad5af",
              "idParent": null,
              "useCaseId": "68a50ebb2479b3f77c3ad5aa",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a50ebb2479b3f77c3ad5ab": {
              "id": "68a50ebb2479b3f77c3ad5ab",
              "idProjects": "68a50ebb2479b3f77c3ad5ab",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50ebb2479b3f77c3ad5aa",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-54-02.722__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Develop Functionality for Calculating Totals for SAP Integration",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "This user story focuses on implementing the functionality to calculate totals required for SAP integration. The calculation involves the following components: WSTOTALCREDI (totals for inclusions and transfers), WSTOTALCREDB (totals for write-offs and exclusions), and WSTOTCREDREGCTB (totals for accounting records). The goal is to ensure accurate computation of these totals based on the provided algorithm and prepare them for subsequent processing. This functionality is critical for generating accurate financial entries in the SAP system.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Ensure that WSTOTALCREDI, WSTOTALCREDB, and WSTOTCREDREGCTB are calculated accurately based on the provided algorithm.\n- Validate that the calculations handle inclusions, transfers, write-offs, and exclusions correctly.\n- Ensure the calculated totals are ready for use in subsequent processes without errors.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50ebb2479b3f77c3ad5ac": {
              "id": "68a50ebb2479b3f77c3ad5ac",
              "idProjects": "68a50ebb2479b3f77c3ad5ac",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50ebb2479b3f77c3ad5aa",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-54-02.722__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement SAP Entry Generation for Inclusions and Transfers",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "This user story involves implementing the functionality to generate SAP entries for inclusions and transfers. If WSTOTALCREDI is greater than 0, the system should create a debit entry using WSCTDEBITO4412 and a credit entry using WSCTCREDITO4412 with the value of WSTOTALCREDI. The generated entries should be passed to the R067GRAVASAP function for further processing. This ensures that inclusions and transfers are accurately recorded in the SAP system.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Generate SAP entries for inclusions and transfers when WSTOTALCREDI > 0.\n- Ensure the debit entry uses WSCTDEBITO4412 and the credit entry uses WSCTCREDITO4412.\n- Pass the generated entries to the R067GRAVASAP function for processing.\n- Validate that the entries are correctly formatted and error-free.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50ebb2479b3f77c3ad5ad": {
              "id": "68a50ebb2479b3f77c3ad5ad",
              "idProjects": "68a50ebb2479b3f77c3ad5ad",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50ebb2479b3f77c3ad5aa",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-54-02.722__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement SAP Entry Generation for Write-Offs and Exclusions",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "This user story focuses on implementing the functionality to generate SAP entries for write-offs and exclusions. If WSTOTALCREDB is greater than 0, the system should create a debit entry using WSCTDEBITO3412 and a credit entry using WSCTCREDITO3412 with the value of WSTOTALCREDB. The generated entries should be passed to the R067GRAVASAP function for further processing. This ensures that write-offs and exclusions are accurately recorded in the SAP system.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Generate SAP entries for write-offs and exclusions when WSTOTALCREDB > 0.\n- Ensure the debit entry uses WSCTDEBITO3412 and the credit entry uses WSCTCREDITO3412.\n- Pass the generated entries to the R067GRAVASAP function for processing.\n- Validate that the entries are correctly formatted and error-free.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50ebb2479b3f77c3ad5ae": {
              "id": "68a50ebb2479b3f77c3ad5ae",
              "idProjects": "68a50ebb2479b3f77c3ad5ae",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50ebb2479b3f77c3ad5aa",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-54-02.722__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement SAP Entry Generation for Accounting Records",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "This user story involves implementing the functionality to generate SAP entries for accounting records. If WSTOTCREDREGCTB is greater than 0, the system should create a debit entry using WSCTDEBITO3413 and a credit entry using WSCTCREDITO3413 with the value of WSTOTCREDREGCTB. The generated entries should be passed to the R067GRAVASAP function for further processing. This ensures that accounting records are accurately recorded in the SAP system.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "3",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Generate SAP entries for accounting records when WSTOTCREDREGCTB > 0.\n- Ensure the debit entry uses WSCTDEBITO3413 and the credit entry uses WSCTCREDITO3413.\n- Pass the generated entries to the R067GRAVASAP function for processing.\n- Validate that the entries are correctly formatted and error-free.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50ebb2479b3f77c3ad5af": {
              "id": "68a50ebb2479b3f77c3ad5af",
              "idProjects": "68a50ebb2479b3f77c3ad5af",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50ebb2479b3f77c3ad5aa",
              "order": 5,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-54-02.722__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Develop SAP Record Structure in R067GRAVASAP",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "This user story focuses on developing the SAP record structure in the R067GRAVASAP function. The structure includes fields such as WS012CORPORA, WS012DIA, WS012MES, WS012ANO, WS012FIL, WS012EVENTO, WS012DTREF, WS012VALOR, and WS012TDOC. For each financial entry, two records should be generated: one for debit (WS012DC = D, WS012CONTA = debit account) and one for credit (WS012DC = C, WS012CONTA = credit account). If the SAP code is 4412, WS012CL should be blank; otherwise, WS012CL should be 'L' with WS012CENTRO1 = 130 and WS012CENTRO2 = 100. This ensures that the SAP records are correctly structured and formatted for integration.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Develop the SAP record structure in the R067GRAVASAP function with all required fields.\n- Ensure two records are generated for each financial entry: one for debit and one for credit.\n- Validate that WS012CL is blank for SAP code 4412 and 'L' with WS012CENTRO1 = 130 and WS012CENTRO2 = 100 for other codes.\n- Ensure the records are correctly formatted and ready for SAP integration.",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        },
        "Geracao de Registros Corporate": {
          "jobId": "2025-08-19__23-54-35.560__Agile",
          "status": "Completed",
          "uri": "/ai/jobs/2025-08-19__23-54-35.560__Agile/results/Geracao de Registros Corporate",
          "processDefinition": [
            {
              "idProjects": "68a50edb2479b3f77c3ad5b2",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Standardized Record Generation for Corporate System Integration",
              "order": 1,
              "blocked": false,
              "children": [],
              "id": "68a50edb2479b3f77c3ad5b2",
              "idParent": null,
              "useCaseId": "68a50edb2479b3f77c3ad5b1",
              "externalId": null
            },
            {
              "idProjects": "68a50edb2479b3f77c3ad5b3",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Develop Central Transaction Processing Logic",
              "order": 2,
              "blocked": false,
              "children": [],
              "id": "68a50edb2479b3f77c3ad5b3",
              "idParent": null,
              "useCaseId": "68a50edb2479b3f77c3ad5b1",
              "externalId": null
            },
            {
              "idProjects": "68a50edb2479b3f77c3ad5b4",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Create APIs for SAP and Corporate System Integration",
              "order": 3,
              "blocked": false,
              "children": [],
              "id": "68a50edb2479b3f77c3ad5b4",
              "idParent": null,
              "useCaseId": "68a50edb2479b3f77c3ad5b1",
              "externalId": null
            },
            {
              "idProjects": "68a50edb2479b3f77c3ad5b5",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Implement Financial Calculations and Totals Service",
              "order": 4,
              "blocked": false,
              "children": [],
              "id": "68a50edb2479b3f77c3ad5b5",
              "idParent": null,
              "useCaseId": "68a50edb2479b3f77c3ad5b1",
              "externalId": null
            },
            {
              "idProjects": "68a50edb2479b3f77c3ad5b6",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdPrevious": "Feature",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "name": "Modernize Data Structures for Transaction Processing",
              "order": 5,
              "blocked": false,
              "children": [],
              "id": "68a50edb2479b3f77c3ad5b6",
              "idParent": null,
              "useCaseId": "68a50edb2479b3f77c3ad5b1",
              "externalId": null
            }
          ],
          "workItemDetails": {
            "68a50edb2479b3f77c3ad5b2": {
              "id": "68a50edb2479b3f77c3ad5b2",
              "idProjects": "68a50edb2479b3f77c3ad5b2",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50edb2479b3f77c3ad5b1",
              "order": 1,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-54-35.560__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Standardized Record Generation for Corporate System Integration",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement a functionality to generate standardized records for integration with the Corporate system, so that detailed transaction data can be seamlessly transferred and processed. This involves:\n- Designing and implementing data structures to handle input, output, and essential variables for processing suspended transactions.\n- Ensuring compliance with mandatory fields such as PKNISUSPENSO (primary key), FKNICONTRATO (foreign key), and ATNDVALORCR (transaction value).\n- Validating and formatting fields like dates (e.g., ATDTPAGTO, ATDTDTCRED) and monetary values.\n- Incorporating business rules for transaction status (ATSFSTATUS) and situation (ATSFSITUACAO).\n- Mapping integration fields for SAP (e.g., ATNICODSAP, WS012CORPORA) and ensuring compatibility with Corporate system requirements.\n- Implementing error handling for SQL transactions and ensuring data integrity during record generation.\n- Creating unit tests to validate the functionality and ensure accuracy of generated records.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The system must generate standardized records with all mandatory fields populated.\n- Records must be formatted correctly for integration with the Corporate system.\n- Error handling must be implemented for SQL transactions.\n- Unit tests must validate the accuracy and completeness of generated records.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50edb2479b3f77c3ad5b3": {
              "id": "68a50edb2479b3f77c3ad5b3",
              "idProjects": "68a50edb2479b3f77c3ad5b3",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50edb2479b3f77c3ad5b1",
              "order": 2,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-54-35.560__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Develop Central Transaction Processing Logic",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to create a central transaction processing logic to handle complex classification rules based on status and date, so that transactions can be processed efficiently and accurately. This involves:\n- Implementing the R020PROCESSA module to classify transactions by status and date.\n- Developing algorithms to calculate balances and totals by branch using specific mathematical formulas.\n- Incorporating rules for determining debit/credit based on transaction codes.\n- Validating the absorption of transactions using the PAKF074VABSORCAO table.\n- Ensuring compatibility with existing data structures and SQL queries.\n- Creating unit tests to validate the processing logic and ensure accuracy.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "13",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The R020PROCESSA module must classify transactions accurately based on status and date.\n- Balances and totals must be calculated correctly for each branch.\n- Debit/credit determination must follow predefined rules.\n- Unit tests must validate the accuracy and efficiency of the processing logic.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50edb2479b3f77c3ad5b4": {
              "id": "68a50edb2479b3f77c3ad5b4",
              "idProjects": "68a50edb2479b3f77c3ad5b4",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50edb2479b3f77c3ad5b1",
              "order": 3,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-54-35.560__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Create APIs for SAP and Corporate System Integration",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to design and implement APIs to replace direct integration with SAP and Corporate systems, so that data exchange becomes more modular and maintainable. This involves:\n- Designing RESTful APIs to handle data exchange with SAP and Corporate systems.\n- Mapping fields such as WS012CORPORA, WS012DATA, WS012CONTA, WS012DC, and WS012VALOR for SAP integration.\n- Ensuring compatibility with Corporate system requirements for record generation.\n- Implementing error handling and validation for API requests and responses.\n- Creating unit and integration tests to validate API functionality and ensure data integrity.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- APIs must handle data exchange with SAP and Corporate systems efficiently.\n- All mapped fields must be correctly processed and validated.\n- Error handling must be implemented for API requests and responses.\n- Unit and integration tests must validate API functionality and data integrity.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50edb2479b3f77c3ad5b5": {
              "id": "68a50edb2479b3f77c3ad5b5",
              "idProjects": "68a50edb2479b3f77c3ad5b5",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50edb2479b3f77c3ad5b1",
              "order": 4,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-54-35.560__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Implement Financial Calculations and Totals Service",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to implement a service to handle financial calculations and totals, so that transaction balances and summaries can be calculated accurately and efficiently. This involves:\n- Developing formulas to calculate balances, including previous balance, inclusions, transfers, reductions, exclusions, and accounting records.\n- Implementing logic to calculate current account balance based on credits and debits.\n- Accumulating totals by type of operation and separating values by transaction status.\n- Creating unit tests to validate the accuracy of financial calculations.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "8",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- The service must calculate balances and totals accurately.\n- Current account balance must be calculated correctly based on credits and debits.\n- Totals must be accumulated by type of operation and separated by transaction status.\n- Unit tests must validate the accuracy of financial calculations.",
                  "values": null
                }
              ],
              "parent": null
            },
            "68a50edb2479b3f77c3ad5b6": {
              "id": "68a50edb2479b3f77c3ad5b6",
              "idProjects": "68a50edb2479b3f77c3ad5b6",
              "projectId": "PoC - Agile",
              "levelTypeId": "UserStory",
              "levelTypeIdNext": [
                "Task",
                "Test"
              ],
              "parentId": null,
              "useCaseId": "68a50edb2479b3f77c3ad5b1",
              "order": 5,
              "blocked": false,
              "integrated": false,
              "jobId": "2025-08-19__23-54-35.560__Agile",
              "externalId": null,
              "fields": [
                {
                  "alias": "Title",
                  "type": "title",
                  "name": "Title",
                  "value": "Modernize Data Structures for Transaction Processing",
                  "values": null
                },
                {
                  "alias": "Description",
                  "type": "multiline",
                  "name": "Description",
                  "value": "As a developer, I want to modernize the data structures used for transaction processing, so that the system becomes more efficient and maintainable. This involves:\n- Replacing COBOL-based data structures with modern equivalents.\n- Redesigning data structures to handle input, output, and essential variables for processing suspended transactions.\n- Ensuring compatibility with existing SQL queries and data mappings.\n- Creating unit tests to validate the functionality and ensure data integrity.",
                  "values": null
                },
                {
                  "alias": "Story Points",
                  "type": "int",
                  "name": "StoryPoints",
                  "value": "5",
                  "values": null
                },
                {
                  "alias": "Acceptance Criteria",
                  "type": "multiline",
                  "name": "AcceptanceCriteria",
                  "value": "- Data structures must be modernized and compatible with existing SQL queries.\n- Input, output, and essential variables must be handled efficiently.\n- Unit tests must validate the functionality and ensure data integrity.",
                  "values": null
                }
              ],
              "parent": null
            }
          }
        }
      },
      "Inicializacao do Sistema e Controle de Data de Processamento": {
        "jobId": "2025-08-19__15-32-24.515__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__15-32-24.515__Agile/results/Inicializacao do Sistema e Controle de Data de Processamento",
        "processDefinition": [
          {
            "idProjects": "68a4992a936ae2dac1ee6a2d",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "System Initialization and File Management Setup",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a4992a936ae2dac1ee6a2d",
            "idParent": null,
            "useCaseId": "68a4992a936ae2dac1ee6a2c",
            "externalId": null
          },
          {
            "idProjects": "68a4992a936ae2dac1ee6a2e",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "System Date and Time Management Service",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a4992a936ae2dac1ee6a2e",
            "idParent": null,
            "useCaseId": "68a4992a936ae2dac1ee6a2c",
            "externalId": null
          },
          {
            "idProjects": "68a4992a936ae2dac1ee6a2f",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Processing Date Control and Validation System",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a4992a936ae2dac1ee6a2f",
            "idParent": null,
            "useCaseId": "68a4992a936ae2dac1ee6a2c",
            "externalId": null
          },
          {
            "idProjects": "68a4992a936ae2dac1ee6a30",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Totalization Variables Initialization Module",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a4992a936ae2dac1ee6a30",
            "idParent": null,
            "useCaseId": "68a4992a936ae2dac1ee6a2c",
            "externalId": null
          },
          {
            "idProjects": "68a4992a936ae2dac1ee6a31",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "SAP Account Configuration and Mapping System",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a4992a936ae2dac1ee6a31",
            "idParent": null,
            "useCaseId": "68a4992a936ae2dac1ee6a2c",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a4992a936ae2dac1ee6a2d": {
            "id": "68a4992a936ae2dac1ee6a2d",
            "idProjects": "68a4992a936ae2dac1ee6a2d",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4992a936ae2dac1ee6a2c",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-32-24.515__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "System Initialization and File Management Setup",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a system administrator, I want the system to properly initialize all required output files and establish the processing environment, so that the transaction processing can begin with all necessary resources available. This story involves opening all required output files (AD1GO002, AB1GO002, AB2GO002, AB3GO002) and ensuring they are ready for data processing operations. The system must validate that all files are accessible and properly configured before proceeding with any transaction processing activities. This initialization is critical for the overall system stability and data integrity throughout the processing cycle.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-System successfully opens all four output files: AD1GO002, AB1GO002, AB2GO002, AB3GO002\n-All files are validated for write access and proper permissions\n-System handles file access errors gracefully with appropriate error messages\n-File handles are properly maintained throughout the session\n-System logs successful file initialization for audit purposes",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4992a936ae2dac1ee6a2e": {
            "id": "68a4992a936ae2dac1ee6a2e",
            "idProjects": "68a4992a936ae2dac1ee6a2e",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4992a936ae2dac1ee6a2c",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-32-24.515__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "System Date and Time Management Service",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a transaction processor, I want the system to obtain and manage current system date and time information, so that all processing activities are properly timestamped and synchronized. This functionality requires calling the YY115A function to retrieve the current system date and time, then extracting individual components including day, month, year, hour, and minute values. The extracted date components will be used throughout the system for various processing operations, report generation, and audit trail purposes. The system must ensure accurate time handling and proper formatting of date components for downstream processes.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "2",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-System successfully calls YY115A function to retrieve current date and time\n-Date and time components are accurately extracted: day, month, year, hour, minute\n-All extracted components are validated for proper format and range\n-System handles timezone considerations appropriately\n-Date components are made available to other system modules\n-Error handling is implemented for date/time retrieval failures",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4992a936ae2dac1ee6a2f": {
            "id": "68a4992a936ae2dac1ee6a2f",
            "idProjects": "68a4992a936ae2dac1ee6a2f",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4992a936ae2dac1ee6a2c",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-32-24.515__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Processing Date Control and Validation System",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a transaction controller, I want the system to determine and validate the processing date for suspended transactions, so that transaction processing follows proper business rules and chronological order. This involves executing a SQL query to retrieve the minimum processing date from the control table (AXG1000.PAKF018VCONTROLE) where movement processing is not complete. The system must validate the SQL execution results, handle error conditions appropriately, and ensure that the retrieved processing date is valid and within acceptable business parameters. The processing date will be converted to the appropriate format and used in report titles and processing logic throughout the system.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-SQL query executes successfully against AXG1000.PAKF018VCONTROLE table\n-System retrieves MINPKDTDTPROC value where ATSFMOVPROC is not equal to N\n-SQLCODE validation ensures successful query execution (SQLCODE = 0)\n-Retrieved date value validation ensures it is not negative or invalid\n-Error handling displays appropriate messages and cancels processing when validation fails\n-Processing date is converted to day-month-year format for report titles\n-System maintains audit trail of processing date determination",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4992a936ae2dac1ee6a30": {
            "id": "68a4992a936ae2dac1ee6a30",
            "idProjects": "68a4992a936ae2dac1ee6a30",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4992a936ae2dac1ee6a2c",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-32-24.515__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Totalization Variables Initialization Module",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a financial processor, I want all totalization variables to be properly initialized to zero at system startup, so that accurate financial calculations and reporting can be performed without carrying over previous session data. This initialization process ensures that all accumulator variables, counters, and summary fields start from a clean state for each processing session. The system must identify all totalization variables used throughout the processing cycle and systematically reset them to zero values. This is critical for maintaining data integrity and ensuring that financial reports and calculations reflect only the current processing session data.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "2",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-All totalization variables are identified and documented\n-System initializes all totalization variables to zero at startup\n-Variable initialization is logged for audit purposes\n-System validates successful initialization of all variables\n-No residual data from previous sessions affects current processing\n-Initialization process is atomic and cannot be partially completed",
                "values": null
              }
            ],
            "parent": null
          },
          "68a4992a936ae2dac1ee6a31": {
            "id": "68a4992a936ae2dac1ee6a31",
            "idProjects": "68a4992a936ae2dac1ee6a31",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a4992a936ae2dac1ee6a2c",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__15-32-24.515__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "SAP Account Configuration and Mapping System",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As an accounting system integrator, I want the system to configure and map SAP account codes to their corresponding debit and credit accounts, so that financial transactions are properly categorized and processed according to accounting standards. This functionality processes specific SAP codes (3412, 3413, 4412) by setting up complement conversion codes and calling the R069ACESSACONTA routine to retrieve the appropriate debit and credit account mappings. The system must store these account mappings in corresponding variables (WSCTDEBITO and WSCTCREDITO) for each SAP code, ensuring that all financial operations reference the correct accounting structure. The process concludes with a COMMIT operation to confirm all configuration changes and account mappings are permanently stored.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "-System processes all three SAP codes: 3412, 3413, and 4412\n-WS06CONVCOMPLEMENTO is properly set for each SAP code\n-R069ACESSACONTA routine is successfully called for each code\n-Debit and credit accounts are retrieved and validated for each SAP code\n-Account mappings are stored in WSCTDEBITO and WSCTCREDITO variables\n-COMMIT operation successfully confirms all configuration changes\n-System handles errors in account retrieval gracefully\n-Account mappings are available for subsequent transaction processing",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Processamento Principal de Transacoes Suspensas": {
        "jobId": "2025-08-19__23-52-18.866__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__23-52-18.866__Agile/results/Processamento Principal de Transacoes Suspensas",
        "processDefinition": [
          {
            "idProjects": "68a50e432479b3f77c3ad58f",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Transaction Fetch and Loop Termination Logic",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a50e432479b3f77c3ad58f",
            "idParent": null,
            "useCaseId": "68a50e432479b3f77c3ad58e",
            "externalId": null
          },
          {
            "idProjects": "68a50e432479b3f77c3ad590",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Skip Transactions with Specific ATNICODSAP Value",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a50e432479b3f77c3ad590",
            "idParent": null,
            "useCaseId": "68a50e432479b3f77c3ad58e",
            "externalId": null
          },
          {
            "idProjects": "68a50e432479b3f77c3ad591",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Validate Null Fields in Transactions",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a50e432479b3f77c3ad591",
            "idParent": null,
            "useCaseId": "68a50e432479b3f77c3ad58e",
            "externalId": null
          },
          {
            "idProjects": "68a50e432479b3f77c3ad592",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Retrieve Descriptions for Transactions",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a50e432479b3f77c3ad592",
            "idParent": null,
            "useCaseId": "68a50e432479b3f77c3ad58e",
            "externalId": null
          },
          {
            "idProjects": "68a50e432479b3f77c3ad593",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Handle Branch Changes and Generate Summaries",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a50e432479b3f77c3ad593",
            "idParent": null,
            "useCaseId": "68a50e432479b3f77c3ad58e",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a50e432479b3f77c3ad58f": {
            "id": "68a50e432479b3f77c3ad58f",
            "idProjects": "68a50e432479b3f77c3ad58f",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e432479b3f77c3ad58e",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-52-18.866__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Transaction Fetch and Loop Termination Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "- Develop functionality to execute a FETCH operation on the cursor REGISTRO to retrieve the next transaction record.\n- Implement logic to handle SQLCODE 100 (end of file) by closing the cursor, setting CHAVEFIM to HIGHVALUES, and exiting the main loop.\n- Ensure proper error handling for SQLCODE values other than zero, displaying an error message and canceling the operation.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system must successfully fetch the next transaction record using the cursor REGISTRO.\n- When SQLCODE equals 100, the cursor must be closed, CHAVEFIM set to HIGHVALUES, and the loop terminated.\n- For SQLCODE values other than zero, an error message must be displayed, and the operation canceled.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e432479b3f77c3ad590": {
            "id": "68a50e432479b3f77c3ad590",
            "idProjects": "68a50e432479b3f77c3ad590",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e432479b3f77c3ad58e",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-52-18.866__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Skip Transactions with Specific ATNICODSAP Value",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "- Implement logic to check if the ATNICODSAP value equals 4400 and skip processing for such transactions.\n- Ensure the system moves to the end of the routine for these records without further processing.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Transactions with ATNICODSAP value of 4400 must be skipped.\n- The system must move to the end of the routine for these records without executing any additional logic.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e432479b3f77c3ad591": {
            "id": "68a50e432479b3f77c3ad591",
            "idProjects": "68a50e432479b3f77c3ad591",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e432479b3f77c3ad58e",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-52-18.866__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Validate Null Fields in Transactions",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "- Integrate the R025VERIFICACAMPOS routine to validate null fields in each transaction record.\n- Ensure proper handling and reporting of any validation issues encountered during the process.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "4",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system must call the R025VERIFICACAMPOS routine for each transaction record.\n- Null fields must be validated, and any issues must be properly handled and reported.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e432479b3f77c3ad592": {
            "id": "68a50e432479b3f77c3ad592",
            "idProjects": "68a50e432479b3f77c3ad592",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e432479b3f77c3ad58e",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-52-18.866__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Retrieve Descriptions for Transactions",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "- Implement logic to call R094SELECTLANCTOCON for transactions with ATNICODSAP value of 0 to retrieve descriptions.\n- Integrate the R095ACESSATIPO routine to obtain type descriptions for all transactions.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system must call R094SELECTLANCTOCON for transactions with ATNICODSAP value of 0 and retrieve the correct descriptions.\n- The system must call R095ACESSATIPO for all transactions and retrieve the correct type descriptions.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e432479b3f77c3ad593": {
            "id": "68a50e432479b3f77c3ad593",
            "idProjects": "68a50e432479b3f77c3ad593",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e432479b3f77c3ad58e",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-52-18.866__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Handle Branch Changes and Generate Summaries",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "- Implement logic to detect changes in branch (filial) by comparing WSFILIALANT with the current FKNDFILIAL.\n- Generate a summary for the previous branch when a change is detected.\n- Force a new page by setting CTLIN to 70 and update WSFILIALANT with the current branch.\n- Apply processing logic based on dates and status as per specific rules.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system must detect branch changes by comparing WSFILIALANT with the current FKNDFILIAL.\n- A summary for the previous branch must be generated when a change is detected.\n- A new page must be forced by setting CTLIN to 70, and WSFILIALANT must be updated with the current branch.\n- Processing logic based on dates and status must be applied as per specific rules.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Classificacao de Transacoes por Data e Status": {
        "jobId": "2025-08-19__23-52-40.789__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__23-52-40.789__Agile/results/Classificacao de Transacoes por Data e Status",
        "processDefinition": [
          {
            "idProjects": "68a50e602479b3f77c3ad596",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Pending Transactions Classification Logic",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a50e602479b3f77c3ad596",
            "idParent": null,
            "useCaseId": "68a50e602479b3f77c3ad595",
            "externalId": null
          },
          {
            "idProjects": "68a50e602479b3f77c3ad597",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Daily Inclusions Classification Logic",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a50e602479b3f77c3ad597",
            "idParent": null,
            "useCaseId": "68a50e602479b3f77c3ad595",
            "externalId": null
          },
          {
            "idProjects": "68a50e602479b3f77c3ad598",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Same-Day Regularization Logic",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a50e602479b3f77c3ad598",
            "idParent": null,
            "useCaseId": "68a50e602479b3f77c3ad595",
            "externalId": null
          },
          {
            "idProjects": "68a50e602479b3f77c3ad599",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Previous-Day Regularization Logic",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a50e602479b3f77c3ad599",
            "idParent": null,
            "useCaseId": "68a50e602479b3f77c3ad595",
            "externalId": null
          },
          {
            "idProjects": "68a50e602479b3f77c3ad59a",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Transaction Classification Framework",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a50e602479b3f77c3ad59a",
            "idParent": null,
            "useCaseId": "68a50e602479b3f77c3ad595",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a50e602479b3f77c3ad596": {
            "id": "68a50e602479b3f77c3ad596",
            "idProjects": "68a50e602479b3f77c3ad596",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e602479b3f77c3ad595",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-52-40.789__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Pending Transactions Classification Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic for classifying pending transactions based on processing date and status so that the system can correctly categorize and calculate totals for these transactions. This includes:\n- Defining the description as 'PENDENTE'.\n- Incrementing the WSQTDESALDOATU counter by 1.\n- Checking if FKNICODLANC is between 999 and 2000 to determine whether to add ATNDVALORCR to WSVLRDEBATU or WSVLRCREDATU.\n- Ensuring the routine exits after processing.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system correctly identifies pending transactions based on the provided criteria.\n- The WSQTDESALDOATU counter is incremented accurately.\n- The correct totals are calculated and stored in WSVLRDEBATU or WSVLRCREDATU based on the FKNICODLANC value.\n- The routine exits without errors after processing.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e602479b3f77c3ad597": {
            "id": "68a50e602479b3f77c3ad597",
            "idProjects": "68a50e602479b3f77c3ad597",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e602479b3f77c3ad595",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-52-40.789__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Daily Inclusions Classification Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic for classifying daily inclusions based on processing date and status so that the system can correctly categorize and calculate totals for these transactions. This includes:\n- Checking if WSATNISUSPENSOANTNN equals 1 to determine whether to increment WSQTDEINCLU and define the description as 'INCLUIDO DIA E PENDENTE'.\n- Otherwise, increment WSQTDETRANS and define the description as 'INCL.TRANSF. PENDENTE'.\n- Calling R030IMPRIMEDET to print details.\n- Incrementing WSQTDESALDOATU.\n- Applying the same debit/credit logic as in the pending transactions classification.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system correctly identifies daily inclusions based on the provided criteria.\n- WSQTDEINCLU or WSQTDETRANS counters are incremented accurately.\n- The correct descriptions are assigned based on the conditions.\n- R030IMPRIMEDET is called to print details.\n- WSQTDESALDOATU is incremented accurately.\n- Debit/credit calculations are applied correctly.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e602479b3f77c3ad598": {
            "id": "68a50e602479b3f77c3ad598",
            "idProjects": "68a50e602479b3f77c3ad598",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e602479b3f77c3ad595",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-52-40.789__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Same-Day Regularization Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic for classifying transactions with same-day regularization based on processing date and status so that the system can correctly categorize and calculate totals for these transactions. This includes:\n- Checking if ATDTPROCSUSP equals PKDTDTPROC and ATDTREGULAR equals PKDTDTPROC and WSATSFSTATUS equals 1.\n- Calling R037VERIFABSORCAO to verify absorption.\n- Defining the description as 'ABSORCAO' if absorption exists, otherwise using the transaction description.\n- Defining an additional description as 'INCLUIDO DIA'.\n- Printing details twice for inclusion and regularization.\n- Applying calculations based on the final status.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system correctly identifies transactions with same-day regularization based on the provided criteria.\n- Absorption is verified using R037VERIFABSORCAO.\n- The correct descriptions are assigned based on the conditions.\n- Details are printed twice for inclusion and regularization.\n- Calculations are applied correctly based on the final status.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e602479b3f77c3ad599": {
            "id": "68a50e602479b3f77c3ad599",
            "idProjects": "68a50e602479b3f77c3ad599",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e602479b3f77c3ad595",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-52-40.789__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Previous-Day Regularization Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic for classifying transactions with regularization from previous days based on processing date and status so that the system can correctly categorize and calculate totals for these transactions. This includes:\n- Checking if ATDTREGULAR is less than PKDTDTPROC and WSATSFSTATUS equals 1.\n- Calling R050VESTATUS to define the status description.\n- Printing details for the transaction.\n- Applying calculations based on the final status.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system correctly identifies transactions with regularization from previous days based on the provided criteria.\n- The status description is defined using R050VESTATUS.\n- Details are printed accurately for the transaction.\n- Calculations are applied correctly based on the final status.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e602479b3f77c3ad59a": {
            "id": "68a50e602479b3f77c3ad59a",
            "idProjects": "68a50e602479b3f77c3ad59a",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e602479b3f77c3ad595",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-52-40.789__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Transaction Classification Framework",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to create a framework for classifying transactions based on processing date and status so that the system can handle various transaction types efficiently. This includes:\n- Designing a modular structure to accommodate the classification logic for pending transactions, daily inclusions, same-day regularizations, and previous-day regularizations.\n- Ensuring the framework supports extensibility for future transaction types.\n- Implementing shared utilities for common operations such as printing details and applying debit/credit calculations.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "13",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The framework is modular and supports the classification logic for all specified transaction types.\n- The framework is extensible for future transaction types.\n- Shared utilities are implemented and reusable across different classification routines.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Calculo de Totalizadores por Status": {
        "jobId": "2025-08-19__23-53-08.097__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__23-53-08.097__Agile/results/Calculo de Totalizadores por Status",
        "processDefinition": [
          {
            "idProjects": "68a50e7a2479b3f77c3ad59d",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Determination of Debit and Credit Transactions",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a50e7a2479b3f77c3ad59d",
            "idParent": null,
            "useCaseId": "68a50e7a2479b3f77c3ad59c",
            "externalId": null
          },
          {
            "idProjects": "68a50e7a2479b3f77c3ad59e",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Develop Calculations for Debit Transactions by Status",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a50e7a2479b3f77c3ad59e",
            "idParent": null,
            "useCaseId": "68a50e7a2479b3f77c3ad59c",
            "externalId": null
          },
          {
            "idProjects": "68a50e7a2479b3f77c3ad59f",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Develop Calculations for Credit Transactions by Status",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a50e7a2479b3f77c3ad59f",
            "idParent": null,
            "useCaseId": "68a50e7a2479b3f77c3ad59c",
            "externalId": null
          },
          {
            "idProjects": "68a50e7a2479b3f77c3ad5a0",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Calculations for Inclusion Transactions",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a50e7a2479b3f77c3ad5a0",
            "idParent": null,
            "useCaseId": "68a50e7a2479b3f77c3ad59c",
            "externalId": null
          },
          {
            "idProjects": "68a50e7a2479b3f77c3ad5a1",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Create Unit Tests for All Transaction Calculations",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a50e7a2479b3f77c3ad5a1",
            "idParent": null,
            "useCaseId": "68a50e7a2479b3f77c3ad59c",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a50e7a2479b3f77c3ad59d": {
            "id": "68a50e7a2479b3f77c3ad59d",
            "idProjects": "68a50e7a2479b3f77c3ad59d",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e7a2479b3f77c3ad59c",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-53-08.097__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Determination of Debit and Credit Transactions",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the logic for determining whether a transaction is a debit or credit based on the transaction code (FKNICODLANC). This functionality will ensure that transactions are categorized correctly according to the rules provided. The logic should check if FKNICODLANC is between 999 and 2000 to classify the transaction as DEBITO; otherwise, classify it as CREDITO. This categorization is critical for subsequent calculations and reporting.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "The system correctly identifies transactions as DEBITO when FKNICODLANC is between 999 and 2000. The system correctly identifies transactions as CREDITO for all other cases. Unit tests are implemented to validate the logic for various edge cases and inputs.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e7a2479b3f77c3ad59e": {
            "id": "68a50e7a2479b3f77c3ad59e",
            "idProjects": "68a50e7a2479b3f77c3ad59e",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e7a2479b3f77c3ad59c",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-53-08.097__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Develop Calculations for Debit Transactions by Status",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement calculations for debit transactions based on their status. This functionality will ensure that debit transactions are processed correctly according to the rules provided. For Status 2 (Baixa), calculate WSVLRDEBBAIXA = ATNDVALORCR and increment WSQTDEBAIXA by 1. For Status 5 (Reg.Contabil), calculate WSVLRDEBREGCTB = ATNDVALORCR, increment WSQTDEREGCTB and WSQTDE1REGCTB by 1. For other statuses, calculate WSVLRDEBEXCL = ATNDVALORCR and increment WSQTDEEXCL by 1.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "The system correctly calculates WSVLRDEBBAIXA, WSVLRDEBREGCTB, and WSVLRDEBEXCL based on the transaction status. The system correctly increments WSQTDEBAIXA, WSQTDEREGCTB, WSQTDE1REGCTB, and WSQTDEEXCL as per the rules. Unit tests are implemented to validate the calculations for various statuses and edge cases.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e7a2479b3f77c3ad59f": {
            "id": "68a50e7a2479b3f77c3ad59f",
            "idProjects": "68a50e7a2479b3f77c3ad59f",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e7a2479b3f77c3ad59c",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-53-08.097__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Develop Calculations for Credit Transactions by Status",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement calculations for credit transactions based on their status. This functionality will ensure that credit transactions are processed correctly according to the rules provided. For Status 2 (Baixa), calculate WSVLRCREDBAIXA = ATNDVALORCR and increment WSQTDEBAIXA by 1. For Status 5 (Reg.Contabil), calculate WSVLRCREDREGCTB = ATNDVALORCR, increment WSQTDEREGCTB and WSQTDE1REGCTB by 1. For other statuses, calculate WSVLRCREDEXCL = ATNDVALORCR and increment WSQTDEEXCL by 1.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "The system correctly calculates WSVLRCREDBAIXA, WSVLRCREDREGCTB, and WSVLRCREDEXCL based on the transaction status. The system correctly increments WSQTDEBAIXA, WSQTDEREGCTB, WSQTDE1REGCTB, and WSQTDEEXCL as per the rules. Unit tests are implemented to validate the calculations for various statuses and edge cases.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e7a2479b3f77c3ad5a0": {
            "id": "68a50e7a2479b3f77c3ad5a0",
            "idProjects": "68a50e7a2479b3f77c3ad5a0",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e7a2479b3f77c3ad59c",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-53-08.097__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Calculations for Inclusion Transactions",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement calculations for inclusion transactions based on the WSATNISUSPENSOANTNN flag. This functionality will ensure that inclusion transactions are processed correctly according to the rules provided. If WSATNISUSPENSOANTNN equals 1, calculate WSVLRDEBINCLU = ATNDVALORCR for DEBITO and WSVLRCREDINCLU = ATNDVALORCR for CREDITO. Otherwise, calculate WSVLRDEBTRANS = ATNDVALORCR for DEBITO and WSVLRCREDTRANS = ATNDVALORCR for CREDITO.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "The system correctly calculates WSVLRDEBINCLU and WSVLRCREDINCLU when WSATNISUSPENSOANTNN equals 1. The system correctly calculates WSVLRDEBTRANS and WSVLRCREDTRANS when WSATNISUSPENSOANTNN does not equal 1. Unit tests are implemented to validate the calculations for various edge cases and inputs.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e7a2479b3f77c3ad5a1": {
            "id": "68a50e7a2479b3f77c3ad5a1",
            "idProjects": "68a50e7a2479b3f77c3ad5a1",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e7a2479b3f77c3ad59c",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-53-08.097__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Create Unit Tests for All Transaction Calculations",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to create comprehensive unit tests for all transaction calculation rules. This functionality will ensure that the implemented logic for debit, credit, and inclusion transactions is robust and error-free. Unit tests should cover edge cases, invalid inputs, and all possible statuses and flags. The tests should validate the correctness of calculations for WSVLRDEBBAIXA, WSVLRDEBREGCTB, WSVLRDEBEXCL, WSVLRCREDBAIXA, WSVLRCREDREGCTB, WSVLRCREDEXCL, WSVLRDEBINCLU, WSVLRCREDINCLU, WSVLRDEBTRANS, and WSVLRCREDTRANS.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "Unit tests are implemented for all calculation rules. Tests cover edge cases, invalid inputs, and all possible statuses and flags. All tests pass successfully, ensuring the correctness of the implemented logic.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Calculo de Saldos e Totais por Filial": {
        "jobId": "2025-08-19__23-53-35.404__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__23-53-35.404__Agile/results/Calculo de Saldos e Totais por Filial",
        "processDefinition": [
          {
            "idProjects": "68a50e972479b3f77c3ad5a4",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Calculation of Previous and Current Balances",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a50e972479b3f77c3ad5a4",
            "idParent": null,
            "useCaseId": "68a50e972479b3f77c3ad5a3",
            "externalId": null
          },
          {
            "idProjects": "68a50e972479b3f77c3ad5a5",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Account Balance Calculation",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a50e972479b3f77c3ad5a5",
            "idParent": null,
            "useCaseId": "68a50e972479b3f77c3ad5a3",
            "externalId": null
          },
          {
            "idProjects": "68a50e972479b3f77c3ad5a6",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Accumulation of General Totals",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a50e972479b3f77c3ad5a6",
            "idParent": null,
            "useCaseId": "68a50e972479b3f77c3ad5a3",
            "externalId": null
          },
          {
            "idProjects": "68a50e972479b3f77c3ad5a7",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Reset of Branch Totals",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a50e972479b3f77c3ad5a7",
            "idParent": null,
            "useCaseId": "68a50e972479b3f77c3ad5a3",
            "externalId": null
          },
          {
            "idProjects": "68a50e972479b3f77c3ad5a8",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Generate Complete Financial Summary for Branch",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a50e972479b3f77c3ad5a8",
            "idParent": null,
            "useCaseId": "68a50e972479b3f77c3ad5a3",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a50e972479b3f77c3ad5a4": {
            "id": "68a50e972479b3f77c3ad5a4",
            "idProjects": "68a50e972479b3f77c3ad5a4",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e972479b3f77c3ad5a3",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-53-35.404__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Calculation of Previous and Current Balances",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the calculation of previous and current balances for each branch so that the financial summary includes accurate historical and current data. This involves calculating the following fields: WSQTDESALDOANT, WSQTDESALDOATU, WSQTDEINCLU, WSQTDETRANS, WSQTDEBAIXA, WSQTDEEXCL, WSQTDEREGCTB, WSVLRDEBANT, WSVLRDEBATU, WSVLRDEBINCLU, WSVLRDEBTRANS, WSVLRDEBBAIXA, WSVLRDEBEXCL, WSVLRDEBREGCTB, WSVLRCREDANT, WSVLRCREDATU, WSVLRCREDINCLU, WSVLRCREDTRANS, WSVLRCREDBAIXA, WSVLRCREDEXCL, WSVLRCREDREGCTB.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Ensure all fields related to previous and current balances are calculated accurately.\n- Validate the calculations against sample data to ensure correctness.\n- Ensure the implementation is modular and reusable.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e972479b3f77c3ad5a5": {
            "id": "68a50e972479b3f77c3ad5a5",
            "idProjects": "68a50e972479b3f77c3ad5a5",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e972479b3f77c3ad5a3",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-53-35.404__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Account Balance Calculation",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the calculation of the account balance for each branch so that the financial summary includes the net balance. This involves calculating the WSSALDOCONTA field using the formula: WSSALDOCONTA = WSVLRCREDATU - WSVLRDEBATU.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Ensure the WSSALDOCONTA field is calculated accurately.\n- Validate the calculation against sample data to ensure correctness.\n- Ensure the implementation is modular and reusable.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e972479b3f77c3ad5a6": {
            "id": "68a50e972479b3f77c3ad5a6",
            "idProjects": "68a50e972479b3f77c3ad5a6",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e972479b3f77c3ad5a3",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-53-35.404__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Accumulation of General Totals",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the accumulation of general totals for each branch so that the financial summary includes consolidated data. This involves calculating and accumulating the following fields: WSTOTQTDSDANT, WSTOTDEBANT, WSTOTCREDANT, WSTOTQTDINCLU, WSTOTDEBINCLU, WSTOTCREDINCLU, WSTOTQTDTRANS, WSTOTDEBTRANS, WSTOTCREDTRANS, WSTOTQTDBAIXA, WSTOTDEBBAIXA, WSTOTCREDBAIXA, WSTOTQTDEXCL, WSTOTDEBEXCL, WSTOTCREDEXCL, WSTOTQTDREGCTB, WSTOTDEBREGCTB, WSTOTCREDREGCTB, WSTOTQTDSDATU, WSTOTDEBATU, WSTOTCREDATU, WSTOTSALDOCONTA.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Ensure all fields related to general totals are calculated and accumulated accurately.\n- Validate the accumulation against sample data to ensure correctness.\n- Ensure the implementation is modular and reusable.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e972479b3f77c3ad5a7": {
            "id": "68a50e972479b3f77c3ad5a7",
            "idProjects": "68a50e972479b3f77c3ad5a7",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e972479b3f77c3ad5a3",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-53-35.404__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Reset of Branch Totals",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement the reset of branch totals so that the financial summary can start fresh for the next branch. This involves initializing the WSTOTAIS structure with zeros.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Ensure the WSTOTAIS structure is reset to zeros accurately.\n- Validate the reset functionality against sample data to ensure correctness.\n- Ensure the implementation is modular and reusable.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50e972479b3f77c3ad5a8": {
            "id": "68a50e972479b3f77c3ad5a8",
            "idProjects": "68a50e972479b3f77c3ad5a8",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50e972479b3f77c3ad5a3",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-53-35.404__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Generate Complete Financial Summary for Branch",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to generate a complete financial summary for each branch so that the system provides a consolidated view of all balances and totals. This involves integrating the calculations for previous balances, current balances, account balances, general totals, and resetting branch totals.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "13",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Ensure the financial summary includes all calculated fields for previous balances, current balances, account balances, and general totals.\n- Validate the generated summary against sample data to ensure correctness.\n- Ensure the implementation is modular and reusable.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Geracao de Lancamentos SAP": {
        "jobId": "2025-08-19__23-54-02.722__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__23-54-02.722__Agile/results/Geracao de Lancamentos SAP",
        "processDefinition": [
          {
            "idProjects": "68a50ebb2479b3f77c3ad5ab",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Develop Functionality for Calculating Totals for SAP Integration",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a50ebb2479b3f77c3ad5ab",
            "idParent": null,
            "useCaseId": "68a50ebb2479b3f77c3ad5aa",
            "externalId": null
          },
          {
            "idProjects": "68a50ebb2479b3f77c3ad5ac",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement SAP Entry Generation for Inclusions and Transfers",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a50ebb2479b3f77c3ad5ac",
            "idParent": null,
            "useCaseId": "68a50ebb2479b3f77c3ad5aa",
            "externalId": null
          },
          {
            "idProjects": "68a50ebb2479b3f77c3ad5ad",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement SAP Entry Generation for Write-Offs and Exclusions",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a50ebb2479b3f77c3ad5ad",
            "idParent": null,
            "useCaseId": "68a50ebb2479b3f77c3ad5aa",
            "externalId": null
          },
          {
            "idProjects": "68a50ebb2479b3f77c3ad5ae",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement SAP Entry Generation for Accounting Records",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a50ebb2479b3f77c3ad5ae",
            "idParent": null,
            "useCaseId": "68a50ebb2479b3f77c3ad5aa",
            "externalId": null
          },
          {
            "idProjects": "68a50ebb2479b3f77c3ad5af",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Develop SAP Record Structure in R067GRAVASAP",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a50ebb2479b3f77c3ad5af",
            "idParent": null,
            "useCaseId": "68a50ebb2479b3f77c3ad5aa",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a50ebb2479b3f77c3ad5ab": {
            "id": "68a50ebb2479b3f77c3ad5ab",
            "idProjects": "68a50ebb2479b3f77c3ad5ab",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50ebb2479b3f77c3ad5aa",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-54-02.722__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Develop Functionality for Calculating Totals for SAP Integration",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "This user story focuses on implementing the functionality to calculate totals required for SAP integration. The calculation involves the following components: WSTOTALCREDI (totals for inclusions and transfers), WSTOTALCREDB (totals for write-offs and exclusions), and WSTOTCREDREGCTB (totals for accounting records). The goal is to ensure accurate computation of these totals based on the provided algorithm and prepare them for subsequent processing. This functionality is critical for generating accurate financial entries in the SAP system.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Ensure that WSTOTALCREDI, WSTOTALCREDB, and WSTOTCREDREGCTB are calculated accurately based on the provided algorithm.\n- Validate that the calculations handle inclusions, transfers, write-offs, and exclusions correctly.\n- Ensure the calculated totals are ready for use in subsequent processes without errors.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50ebb2479b3f77c3ad5ac": {
            "id": "68a50ebb2479b3f77c3ad5ac",
            "idProjects": "68a50ebb2479b3f77c3ad5ac",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50ebb2479b3f77c3ad5aa",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-54-02.722__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement SAP Entry Generation for Inclusions and Transfers",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "This user story involves implementing the functionality to generate SAP entries for inclusions and transfers. If WSTOTALCREDI is greater than 0, the system should create a debit entry using WSCTDEBITO4412 and a credit entry using WSCTCREDITO4412 with the value of WSTOTALCREDI. The generated entries should be passed to the R067GRAVASAP function for further processing. This ensures that inclusions and transfers are accurately recorded in the SAP system.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Generate SAP entries for inclusions and transfers when WSTOTALCREDI > 0.\n- Ensure the debit entry uses WSCTDEBITO4412 and the credit entry uses WSCTCREDITO4412.\n- Pass the generated entries to the R067GRAVASAP function for processing.\n- Validate that the entries are correctly formatted and error-free.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50ebb2479b3f77c3ad5ad": {
            "id": "68a50ebb2479b3f77c3ad5ad",
            "idProjects": "68a50ebb2479b3f77c3ad5ad",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50ebb2479b3f77c3ad5aa",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-54-02.722__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement SAP Entry Generation for Write-Offs and Exclusions",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "This user story focuses on implementing the functionality to generate SAP entries for write-offs and exclusions. If WSTOTALCREDB is greater than 0, the system should create a debit entry using WSCTDEBITO3412 and a credit entry using WSCTCREDITO3412 with the value of WSTOTALCREDB. The generated entries should be passed to the R067GRAVASAP function for further processing. This ensures that write-offs and exclusions are accurately recorded in the SAP system.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Generate SAP entries for write-offs and exclusions when WSTOTALCREDB > 0.\n- Ensure the debit entry uses WSCTDEBITO3412 and the credit entry uses WSCTCREDITO3412.\n- Pass the generated entries to the R067GRAVASAP function for processing.\n- Validate that the entries are correctly formatted and error-free.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50ebb2479b3f77c3ad5ae": {
            "id": "68a50ebb2479b3f77c3ad5ae",
            "idProjects": "68a50ebb2479b3f77c3ad5ae",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50ebb2479b3f77c3ad5aa",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-54-02.722__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement SAP Entry Generation for Accounting Records",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "This user story involves implementing the functionality to generate SAP entries for accounting records. If WSTOTCREDREGCTB is greater than 0, the system should create a debit entry using WSCTDEBITO3413 and a credit entry using WSCTCREDITO3413 with the value of WSTOTCREDREGCTB. The generated entries should be passed to the R067GRAVASAP function for further processing. This ensures that accounting records are accurately recorded in the SAP system.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "3",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Generate SAP entries for accounting records when WSTOTCREDREGCTB > 0.\n- Ensure the debit entry uses WSCTDEBITO3413 and the credit entry uses WSCTCREDITO3413.\n- Pass the generated entries to the R067GRAVASAP function for processing.\n- Validate that the entries are correctly formatted and error-free.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50ebb2479b3f77c3ad5af": {
            "id": "68a50ebb2479b3f77c3ad5af",
            "idProjects": "68a50ebb2479b3f77c3ad5af",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50ebb2479b3f77c3ad5aa",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-54-02.722__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Develop SAP Record Structure in R067GRAVASAP",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "This user story focuses on developing the SAP record structure in the R067GRAVASAP function. The structure includes fields such as WS012CORPORA, WS012DIA, WS012MES, WS012ANO, WS012FIL, WS012EVENTO, WS012DTREF, WS012VALOR, and WS012TDOC. For each financial entry, two records should be generated: one for debit (WS012DC = D, WS012CONTA = debit account) and one for credit (WS012DC = C, WS012CONTA = credit account). If the SAP code is 4412, WS012CL should be blank; otherwise, WS012CL should be 'L' with WS012CENTRO1 = 130 and WS012CENTRO2 = 100. This ensures that the SAP records are correctly structured and formatted for integration.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Develop the SAP record structure in the R067GRAVASAP function with all required fields.\n- Ensure two records are generated for each financial entry: one for debit and one for credit.\n- Validate that WS012CL is blank for SAP code 4412 and 'L' with WS012CENTRO1 = 130 and WS012CENTRO2 = 100 for other codes.\n- Ensure the records are correctly formatted and ready for SAP integration.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      },
      "Geracao de Registros Corporate": {
        "jobId": "2025-08-19__23-54-35.560__Agile",
        "status": "Completed",
        "uri": "/ai/jobs/2025-08-19__23-54-35.560__Agile/results/Geracao de Registros Corporate",
        "processDefinition": [
          {
            "idProjects": "68a50edb2479b3f77c3ad5b2",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Standardized Record Generation for Corporate System Integration",
            "order": 1,
            "blocked": false,
            "children": [],
            "id": "68a50edb2479b3f77c3ad5b2",
            "idParent": null,
            "useCaseId": "68a50edb2479b3f77c3ad5b1",
            "externalId": null
          },
          {
            "idProjects": "68a50edb2479b3f77c3ad5b3",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Develop Central Transaction Processing Logic",
            "order": 2,
            "blocked": false,
            "children": [],
            "id": "68a50edb2479b3f77c3ad5b3",
            "idParent": null,
            "useCaseId": "68a50edb2479b3f77c3ad5b1",
            "externalId": null
          },
          {
            "idProjects": "68a50edb2479b3f77c3ad5b4",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Create APIs for SAP and Corporate System Integration",
            "order": 3,
            "blocked": false,
            "children": [],
            "id": "68a50edb2479b3f77c3ad5b4",
            "idParent": null,
            "useCaseId": "68a50edb2479b3f77c3ad5b1",
            "externalId": null
          },
          {
            "idProjects": "68a50edb2479b3f77c3ad5b5",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Implement Financial Calculations and Totals Service",
            "order": 4,
            "blocked": false,
            "children": [],
            "id": "68a50edb2479b3f77c3ad5b5",
            "idParent": null,
            "useCaseId": "68a50edb2479b3f77c3ad5b1",
            "externalId": null
          },
          {
            "idProjects": "68a50edb2479b3f77c3ad5b6",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdPrevious": "Feature",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "name": "Modernize Data Structures for Transaction Processing",
            "order": 5,
            "blocked": false,
            "children": [],
            "id": "68a50edb2479b3f77c3ad5b6",
            "idParent": null,
            "useCaseId": "68a50edb2479b3f77c3ad5b1",
            "externalId": null
          }
        ],
        "workItemDetails": {
          "68a50edb2479b3f77c3ad5b2": {
            "id": "68a50edb2479b3f77c3ad5b2",
            "idProjects": "68a50edb2479b3f77c3ad5b2",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50edb2479b3f77c3ad5b1",
            "order": 1,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-54-35.560__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Standardized Record Generation for Corporate System Integration",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement a functionality to generate standardized records for integration with the Corporate system, so that detailed transaction data can be seamlessly transferred and processed. This involves:\n- Designing and implementing data structures to handle input, output, and essential variables for processing suspended transactions.\n- Ensuring compliance with mandatory fields such as PKNISUSPENSO (primary key), FKNICONTRATO (foreign key), and ATNDVALORCR (transaction value).\n- Validating and formatting fields like dates (e.g., ATDTPAGTO, ATDTDTCRED) and monetary values.\n- Incorporating business rules for transaction status (ATSFSTATUS) and situation (ATSFSITUACAO).\n- Mapping integration fields for SAP (e.g., ATNICODSAP, WS012CORPORA) and ensuring compatibility with Corporate system requirements.\n- Implementing error handling for SQL transactions and ensuring data integrity during record generation.\n- Creating unit tests to validate the functionality and ensure accuracy of generated records.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The system must generate standardized records with all mandatory fields populated.\n- Records must be formatted correctly for integration with the Corporate system.\n- Error handling must be implemented for SQL transactions.\n- Unit tests must validate the accuracy and completeness of generated records.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50edb2479b3f77c3ad5b3": {
            "id": "68a50edb2479b3f77c3ad5b3",
            "idProjects": "68a50edb2479b3f77c3ad5b3",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50edb2479b3f77c3ad5b1",
            "order": 2,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-54-35.560__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Develop Central Transaction Processing Logic",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to create a central transaction processing logic to handle complex classification rules based on status and date, so that transactions can be processed efficiently and accurately. This involves:\n- Implementing the R020PROCESSA module to classify transactions by status and date.\n- Developing algorithms to calculate balances and totals by branch using specific mathematical formulas.\n- Incorporating rules for determining debit/credit based on transaction codes.\n- Validating the absorption of transactions using the PAKF074VABSORCAO table.\n- Ensuring compatibility with existing data structures and SQL queries.\n- Creating unit tests to validate the processing logic and ensure accuracy.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "13",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The R020PROCESSA module must classify transactions accurately based on status and date.\n- Balances and totals must be calculated correctly for each branch.\n- Debit/credit determination must follow predefined rules.\n- Unit tests must validate the accuracy and efficiency of the processing logic.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50edb2479b3f77c3ad5b4": {
            "id": "68a50edb2479b3f77c3ad5b4",
            "idProjects": "68a50edb2479b3f77c3ad5b4",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50edb2479b3f77c3ad5b1",
            "order": 3,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-54-35.560__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Create APIs for SAP and Corporate System Integration",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to design and implement APIs to replace direct integration with SAP and Corporate systems, so that data exchange becomes more modular and maintainable. This involves:\n- Designing RESTful APIs to handle data exchange with SAP and Corporate systems.\n- Mapping fields such as WS012CORPORA, WS012DATA, WS012CONTA, WS012DC, and WS012VALOR for SAP integration.\n- Ensuring compatibility with Corporate system requirements for record generation.\n- Implementing error handling and validation for API requests and responses.\n- Creating unit and integration tests to validate API functionality and ensure data integrity.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- APIs must handle data exchange with SAP and Corporate systems efficiently.\n- All mapped fields must be correctly processed and validated.\n- Error handling must be implemented for API requests and responses.\n- Unit and integration tests must validate API functionality and data integrity.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50edb2479b3f77c3ad5b5": {
            "id": "68a50edb2479b3f77c3ad5b5",
            "idProjects": "68a50edb2479b3f77c3ad5b5",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50edb2479b3f77c3ad5b1",
            "order": 4,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-54-35.560__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Implement Financial Calculations and Totals Service",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to implement a service to handle financial calculations and totals, so that transaction balances and summaries can be calculated accurately and efficiently. This involves:\n- Developing formulas to calculate balances, including previous balance, inclusions, transfers, reductions, exclusions, and accounting records.\n- Implementing logic to calculate current account balance based on credits and debits.\n- Accumulating totals by type of operation and separating values by transaction status.\n- Creating unit tests to validate the accuracy of financial calculations.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "8",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- The service must calculate balances and totals accurately.\n- Current account balance must be calculated correctly based on credits and debits.\n- Totals must be accumulated by type of operation and separated by transaction status.\n- Unit tests must validate the accuracy of financial calculations.",
                "values": null
              }
            ],
            "parent": null
          },
          "68a50edb2479b3f77c3ad5b6": {
            "id": "68a50edb2479b3f77c3ad5b6",
            "idProjects": "68a50edb2479b3f77c3ad5b6",
            "projectId": "PoC - Agile",
            "levelTypeId": "UserStory",
            "levelTypeIdNext": [
              "Task",
              "Test"
            ],
            "parentId": null,
            "useCaseId": "68a50edb2479b3f77c3ad5b1",
            "order": 5,
            "blocked": false,
            "integrated": false,
            "jobId": "2025-08-19__23-54-35.560__Agile",
            "externalId": null,
            "fields": [
              {
                "alias": "Title",
                "type": "title",
                "name": "Title",
                "value": "Modernize Data Structures for Transaction Processing",
                "values": null
              },
              {
                "alias": "Description",
                "type": "multiline",
                "name": "Description",
                "value": "As a developer, I want to modernize the data structures used for transaction processing, so that the system becomes more efficient and maintainable. This involves:\n- Replacing COBOL-based data structures with modern equivalents.\n- Redesigning data structures to handle input, output, and essential variables for processing suspended transactions.\n- Ensuring compatibility with existing SQL queries and data mappings.\n- Creating unit tests to validate the functionality and ensure data integrity.",
                "values": null
              },
              {
                "alias": "Story Points",
                "type": "int",
                "name": "StoryPoints",
                "value": "5",
                "values": null
              },
              {
                "alias": "Acceptance Criteria",
                "type": "multiline",
                "name": "AcceptanceCriteria",
                "value": "- Data structures must be modernized and compatible with existing SQL queries.\n- Input, output, and essential variables must be handled efficiently.\n- Unit tests must validate the functionality and ensure data integrity.",
                "values": null
              }
            ],
            "parent": null
          }
        }
      }
    }
  }
]